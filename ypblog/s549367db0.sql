-- phpMyAdmin SQL Dump
-- version 3.4.10.1
-- http://www.phpmyadmin.net
--
-- 主机: localhost
-- 生成日期: 2013 年 01 月 17 日 17:32
-- 服务器版本: 5.1.63
-- PHP 版本: 5.2.9

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- 数据库: `s549367db0`
--

-- --------------------------------------------------------

--
-- 表的结构 `yulin_access`
--

CREATE TABLE IF NOT EXISTS `yulin_access` (
  `role_id` smallint(6) unsigned NOT NULL,
  `node_id` smallint(6) unsigned NOT NULL,
  `level` tinyint(1) NOT NULL,
  `pid` smallint(6) NOT NULL,
  `module` varchar(25) CHARACTER SET utf8 DEFAULT NULL,
  KEY `role_id` (`role_id`),
  KEY `node_id` (`node_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='权限关联';

--
-- 转存表中的数据 `yulin_access`
--

INSERT INTO `yulin_access` (`role_id`, `node_id`, `level`, `pid`, `module`) VALUES
(2, 1, 1, 0, NULL),
(2, 2, 2, 1, NULL),
(2, 4, 2, 1, NULL),
(2, 7, 3, 2, NULL),
(2, 9, 2, 1, NULL),
(2, 10, 2, 1, NULL),
(2, 11, 2, 1, NULL),
(2, 13, 2, 1, NULL),
(2, 14, 2, 1, NULL),
(2, 15, 2, 1, NULL),
(2, 16, 2, 1, NULL),
(2, 17, 2, 1, NULL),
(2, 19, 2, 1, NULL),
(2, 21, 3, 9, NULL),
(2, 22, 3, 10, NULL),
(2, 23, 3, 11, NULL),
(2, 25, 3, 13, NULL),
(2, 26, 3, 14, NULL),
(2, 27, 3, 15, NULL),
(2, 28, 3, 16, NULL),
(2, 29, 3, 17, NULL),
(2, 31, 2, 1, NULL),
(2, 33, 3, 10, NULL),
(2, 35, 3, 10, NULL),
(2, 39, 3, 11, NULL),
(2, 41, 3, 11, NULL),
(2, 46, 3, 13, NULL),
(2, 53, 3, 19, NULL),
(2, 54, 3, 19, NULL),
(2, 56, 3, 19, NULL),
(2, 58, 3, 19, NULL),
(2, 60, 3, 31, NULL),
(2, 61, 3, 31, NULL),
(2, 63, 3, 31, NULL),
(2, 66, 3, 4, NULL),
(2, 67, 3, 4, NULL),
(2, 69, 3, 4, NULL),
(3, 7, 3, 2, NULL);

-- --------------------------------------------------------

--
-- 表的结构 `yulin_archive`
--

CREATE TABLE IF NOT EXISTS `yulin_archive` (
  `id` int(8) unsigned NOT NULL AUTO_INCREMENT,
  `sortid` int(8) unsigned NOT NULL,
  `paixu` int(8) unsigned NOT NULL,
  `title` varchar(225) CHARACTER SET utf8 NOT NULL,
  `style` varchar(100) CHARACTER SET utf8 NOT NULL,
  `author` varchar(150) CHARACTER SET utf8 NOT NULL,
  `clicks` int(8) NOT NULL DEFAULT '0',
  `creattime` varchar(150) CHARACTER SET utf8 NOT NULL,
  `content` text CHARACTER SET utf8 NOT NULL,
  `status` int(1) unsigned NOT NULL DEFAULT '0',
  `attribute` int(1) unsigned NOT NULL DEFAULT '0',
  `tags` varchar(255) CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 COMMENT='文档' AUTO_INCREMENT=19 ;

--
-- 转存表中的数据 `yulin_archive`
--

INSERT INTO `yulin_archive` (`id`, `sortid`, `paixu`, `title`, `style`, `author`, `clicks`, `creattime`, `content`, `status`, `attribute`, `tags`) VALUES
(1, 31, 0, 'Jquery $.post()跟$.get()方法的区别 ', '', '', 13, '1352783957', '<div class="detail">\n	<p>\n		<span style="color:#337FE5;">相同点：</span> \n	</p>\n	<p>\n		1.他们都是一个简单的 POST 或者 GET&nbsp;请求功能以取代复杂 $.ajax&nbsp;\n	</p>\n	<p>\n		2.格式：以get举例\n	</p>\n	<p>\n		jQuery.get(url, [data], [callback], [type])<br />\n参数<br />\nurl 待载入页面的URL地址<br />\ndata (可选) 待发送 Key/value 参数。<br />\ncallback (可选) 载入成功时回调函数。<br />\ntype (可选) 返回内容格式，xml, html, script, json, text, _default。\n	</p>\n	<p>\n		<br />\n	</p>\n	<p>\n		<span style="color:#337FE5;">不同点：</span> \n	</p>\n	<p>\n		post方法可以提交大量数据，get在数据提交方面受限于服务器或浏览器允许的url长度\n	</p>\n	<p>\n		就是提交数据时POST和GET的区别\n	</p>\n	<p>\n		你说的后台$_POST[''aids'']能不能取到值是取决于你前台使用的什么方法提交的，如果是$.post提交是可以取到的，但如果是$.get提交数据后台用$_POST[''aids'']是取不到值的\n	</p>\n</div>', 2, 0, 'Jquery'),
(2, 32, 0, 'PHP的伪静态正则表达式', '', '', 20, '1352958677', '<span style="color:#9A9A9A;font-family:arial;font-size:12px;line-height:18px;"> \n<p style="color:#6D6D6D;">\n	基本语法&nbsp;<br />\n　　<br />\n　　正则表达式的形式一般如下：&nbsp;<br />\n　　/love/&nbsp;<br />\n　其中位于“/”定界符之间的部分就是将要在目标对象中进行匹配的模式。用户只要把希望查找匹配对象的模式内容放入“/”定界符之间即可。为了能够使用户\n更加灵活的定制模式内容，正则表达式提供了专门的“元字符”。所谓元字符就是指那些在正则表达式中具有特殊意义的专用字符，可以用来规定其前导字符（即位\n于元字符前面的字符）在目标对象中的出现模式。&nbsp;<br />\n　　较为常用的元字符包括： “+”， “*”，以及 “?”。其中，“+”元字符规定其前导字符必须在目标对象中连续出现一次或多次，“*”元字符规定其前导字符必须在目标对象中出现零次或连续多次，而“?”元字符规定其前导对象必须在目标对象中连续出现零次或一次。&nbsp;<br />\n　　下面，就让我们来看一下正则表达式元字符的具体应用。&nbsp;<br />\n　　/fo+/&nbsp;<br />\n　　因为上述正则表达式中包含“+”元字符，表示可以与目标对象中的 “fool”, “fo”, 或者 “football”等在字母f后面连续出现一个或多个字母o的字符串相匹配。&nbsp;<br />\n　　/eg*/&nbsp;<br />\n　　因为上述正则表达式中包含“*”元字符，表示可以与目标对象中的 “easy”, “ego”, 或者 “egg”等在字母e后面连续出现零个或多个字母g的字符串相匹配。&nbsp;<br />\n　　/Wil?/&nbsp;<br />\n　　因为上述正则表达式中包含“？”元字符，表示可以与目标对象中的 “Win”, 或者 “Wilson”,等在字母i后面连续出现零个或一个字母l的字符串相匹配。&nbsp;<br />\n　　除了元字符之外，用户还可以精确指定模式在匹配对象中出现的频率。例如，&nbsp;<br />\n　　/jim{2,6}/&nbsp;<br />\n　　上述正则表达式规定字符m可以在匹配对象中连续出现2-6次，因此，上述正则表达式可以同jimmy或jimmmmmy等字符串相匹配。&nbsp;<br />\n　　在对如何使用正则表达式有了初步了解之后，我们来看一下其它几个重要的元字符的使用方式。&nbsp;<br />\n　　\\s：用于匹配单个空格符，包括tab键和换行符；&nbsp;<br />\n　　\\S：用于匹配除单个空格符之外的所有字符；&nbsp;<br />\n　　\\d：用于匹配从0到9的数字；&nbsp;<br />\n　　\\w：用于匹配字母，数字或下划线字符；&nbsp;<br />\n　　\\W：用于匹配所有与\\w不匹配的字符；&nbsp;<br />\n　　. ：用于匹配除换行符之外的所有字符。&nbsp;<br />\n　　（说明：我们可以把\\s和\\S以及\\w和\\W看作互为逆运算）&nbsp;<br />\n　　下面，我们就通过实例看一下如何在正则表达式中使用上述元字符。&nbsp;<br />\n　　/\\s+/&nbsp;<br />\n　　上述正则表达式可以用于匹配目标对象中的一个或多个空格字符。&nbsp;<br />\n　　/\\d000/&nbsp;<br />\n　　如果我们手中有一份复杂的财务报表，那么我们可以通过上述正则表达式轻而易举的查找到所有总额达千元的款项。&nbsp;<br />\n　　除了我们以上所介绍的元字符之外，正则表达式中还具有另外一种较为独特的专用字符，即定位符。定位符用于规定匹配模式在目标对象中的出现位置。&nbsp;<br />\n　较为常用的定位符包括： “^”, “$”, “\\b” 以及 \n“\\B”。其中，“^”定位符规定匹配模式必须出现在目标字符串的开头，“$”定位符规定匹配模式必须出现在目标对象的结尾，\\b定位符规定匹配模式必须\n出现在目标字符串的开头或结尾的两个边界之一，而“\\B”定位符则规定匹配对象必须位于目标字符串的开头和结尾两个边界之内，即匹配对象既不能作为目标字\n符串的开头，也不能作为目标字符串的结尾。同样，我们也可以把“^”和“$”以及“\\b”和“\\B”看作是互为逆运算的两组定位符。举例来说：&nbsp;<br />\n　　/^hell/&nbsp;<br />\n　　因为上述正则表达式中包含“^”定位符，所以可以与目标对象中以 “hell”, “hello”或 “hellhound”开头的字符串相匹配。&nbsp;<br />\n　　/ar$/&nbsp;<br />\n　　因为上述正则表达式中包含“$”定位符，所以可以与目标对象中以 “car”, “bar”或 “ar” 结尾的字符串相匹配。&nbsp;<br />\n　　/\\bbom/&nbsp;<br />\n　　因为上述正则表达式模式以“\\b”定位符开头，所以可以与目标对象中以 “bomb”, 或 “bom”开头的字符串相匹配。&nbsp;<br />\n　　/man\\b/&nbsp;<br />\n　　因为上述正则表达式模式以“\\b”定位符结尾，所以可以与目标对象中以 “human”, “woman”或 “man”结尾的字符串相匹配。&nbsp;<br />\n　　为了能够方便用户更加灵活的设定匹配模式，正则表达式允许使用者在匹配模式中指定某一个范围而不局限于具体的字符。例如：&nbsp;<br />\n　　/[A-Z]/&nbsp;<br />\n　　上述正则表达式将会与从A到Z范围内任何一个大写字母相匹配。&nbsp;<br />\n　　/[a-z]/&nbsp;<br />\n　　上述正则表达式将会与从a到z范围内任何一个小写字母相匹配。&nbsp;<br />\n　　/[0-9]/&nbsp;<br />\n　　上述正则表达式将会与从0到9范围内任何一个数字相匹配。&nbsp;<br />\n　　/([a-z][A-Z][0-9])+/&nbsp;<br />\n　上述正则表达式将会与任何由字母和数字组成的字符串，如 “aB0” 等相匹配。这里需要提醒用户注意的一点就是可以在正则表达式中使用 “()” \n把字符串组合在一起。“()”符号包含的内容必须同时出现在目标对象中。因此，上述正则表达式将无法与诸如 \n“abc”等的字符串匹配，因为“abc”中的最后一个字符为字母而非数字。&nbsp;<br />\n　　如果我们希望在正则表达式中实现类似编程逻辑中的“或”运算，在多个不同的模式中任选一个进行匹配的话，可以使用管道符 “|”。例如：&nbsp;<br />\n　　/to|too|2/&nbsp;<br />\n　　上述正则表达式将会与目标对象中的 “to”, “too”, 或 “2” 相匹配。&nbsp;<br />\n　　正则表达式中还有一个较为常用的运算符，即否定符 “[^]”。与我们前文所介绍的定位符 “^” 不同，否定符 “[^]”规定目标对象中不能存在模式中所规定的字符串。例如：&nbsp;<br />\n　　/[^A-C]/&nbsp;<br />\n　　上述字符串将会与目标对象中除A，B，和C之外的任何字符相匹配。一般来说，当“^”出现在 “[]”内时就被视做否定运算符；而当“^”位于“[]”之外，或没有“[]”时，则应当被视做定位符。&nbsp;<br />\n　　最后，当用户需要在正则表达式的模式中加入元字符，并查找其匹配对象时，可以使用转义符“\\”。例如：&nbsp;<br />\n　　/Th\\*/&nbsp;<br />\n　　上述正则表达式将会与目标对象中的“Th*”而非“The”等相匹配。\n</p>\n<p style="color:#6D6D6D;">\n	使用实例\n</p>\n<p style="color:#6D6D6D;">\n	　　在对正则表达式有了较为全面的了解之后，我们就来看一下如何在Perl，PHP，以及JavaScript中使用正则表达式。\n</p>\n<p style="color:#6D6D6D;">\n	　　通常，Perl中正则表达式的使用格式如下：\n</p>\n<p style="color:#6D6D6D;">\n	　　operator / regular-expression / string-to-replace / modifiers\n</p>\n<p style="color:#6D6D6D;">\n	　　运算符一项可以是m或s，分别代表匹配运算和替换运算。\n</p>\n<p style="color:#6D6D6D;">\n	　　其中，正则表达式一项是将要进行匹配或替换操作的模式，可以由任意字符，元字符，或定位符等组成。替换字符串一项是使用s运算符时，对查找到的模式匹配对象进行替换的字符串。最后的参数项用来控制不同的匹配或替换方式。例如：\n</p>\n<p style="color:#6D6D6D;">\n	　　s/geed/good/\n</p>\n<p style="color:#6D6D6D;">\n	　　将会在目标对象中查找第一个出现的geed字串，并将其替换为good。如果我们希望在目标对象的全局范围内执行多次查找—替换操作的话，可以使用参数 “g”，即s/love/lust/g。\n</p>\n<p style="color:#6D6D6D;">\n	　　此外，如果我们不需要限制匹配的大小写形式的话，可以使用参数 “i ”。例如，\n</p>\n<p style="color:#6D6D6D;">\n	　　m/JewEL/i\n</p>\n<p style="color:#6D6D6D;">\n	　　上述正则表达式将会与目标对象中的jewel，Jewel，或JEWEL相匹配。\n</p>\n<p style="color:#6D6D6D;">\n	　　在Perl中，使用专门的运算符“=~”指定正则表达式的匹配对象。例如：\n</p>\n<p style="color:#6D6D6D;">\n	　　$flag =~ s/abc/ABC/\n</p>\n<p style="color:#6D6D6D;">\n	　　上述正则表达式将会把变量$flag中的字串abc替换为ABC。\n</p>\n<p style="color:#6D6D6D;">\n	　　下面，我们就在Perl程序中加入正则表达式，验证用户邮件地址格式的有效性。代码如下：\n</p>\n<p style="color:#6D6D6D;">\n	<br />\n</p>\n<pre class="brush:pl;">　　#!/usr/bin/perl \n　　# get input \n　　print “What''s your email address?\\n”; \n　　$email = &lt;STDIN&gt; \n　　chomp($email); \n　　# match and display result \n　　if($email =~ /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/) \n　　{ \n　　print(“Your email address is correct!\\n”); \n　　} \n　　else \n　　　{ \n　　　　print(“Please try again!\\n”); \n　　　}</pre>\n<p>\n	<br />\n</p>\n<p style="color:#6D6D6D;">\n	　　如果用户更偏爱PHP的话，可以使用ereg()函数进行模式匹配操作。ereg()函数的使用格式如下：&nbsp;<br />\n　　 ereg(pattern, string)\n</p>\n<p style="color:#6D6D6D;">\n	　　其中，pattern代表正则表达式的模式，而string则是执行查找替换操作的目标对象。同样是验证邮件地址，使用PHP编写的程序代码如下：\n</p>\n<p style="color:#6D6D6D;">\n	<br />\n</p>\n<pre class="brush:php;">　　&lt;?php \n　　 if (ereg(“^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+”,$email)) \n　　　 { echo “Your email address is correct!”;} \n　　 else \n　　　 { echo “Please try again!”;} \n　　 ?&gt; </pre>\n<br />\n　　最后，我们在来看一下JavaScript。JavaScript 1.2中带有一个功能强大的RegExp()对象，可以用来进行正则表达式的匹配操作。其中的test()方法可以检验目标对象中是否包含匹配模式，并相应的返回true或false。\n<p>\n	<br />\n</p>\n<p style="color:#6D6D6D;">\n	　　我们可以使用JavaScript编写以下脚本，验证用户输入的邮件地址的有效性。\n</p>\n<p style="color:#6D6D6D;">\n	<br />\n</p>\n<pre class="brush:js;">　　&lt;html&gt; \n　　 &lt;head&gt; \n　　　 &lt;script language="Javascript1.2"&gt; \n　　　　 &lt;!-- start hiding \n　　　　 function verifyAddress(obj) \n　　　　　{ \n　　　　　　var email = obj.email.value; \n　　　　　　var pattern = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/; \n　　　　　　flag = pattern.test(email); \n　　　　　　if(flag) \n　　　　　　{ \n　　　　　　　alert(“Your email address is correct!”); \n　　　　　　　return true; \n　　　　　　} \n　　　　　　else \n　　　　　　　{ \n　　　　　　　　alert(“Please try again!”); \n　　　　　　　　return false; \n　　　　　　　 } \n　　　　　 } \n　　　　 // stop hiding --&gt; \n　　　 &lt;/script&gt; \n　　　&lt;/head&gt; \n　　 &lt;body&gt; \n　　 &lt;form onSubmit="return verifyAddress(this);"&gt; \n　　　&lt;input name="email" type="text"&gt; \n　　　&lt;input type="submit"&gt; \n　　　&lt;/form&gt; \n　　&lt;/body&gt;</pre>\n<p>\n	<br />\n</p>\n<p style="color:#6D6D6D;">\n	-------------------------------------------------------------------------------------------------------------\n</p>\n<p style="color:#6D6D6D;">\n	mod_rewrite是Apache的一个非常强大的功能，它可以实现伪静态页面。\n</p>\n<p style="color:#6D6D6D;">\n	1.检测Apache是否支持mod_rewrite<br />\n&nbsp;&nbsp;\n &nbsp;&nbsp;&nbsp; 通过php提供的phpinfo()函数查看环境配置，通过Ctrl+F查找到“Loaded \nModules”，其中列出了所有apache2handler已经开启的模块，如果里面包括“mod_rewrite”，则已经支持，不再需要继续设\n置。如果没有开启“mod_rewrite”，则打开目录 您的apache安装目录“/apache/conf/” 下的 httpd.conf \n文件，通过Ctrl+F查找到“LoadModule \nrewrite_module”，将前面的”#”号删除即可。如果没有查找到，则到“LoadModule” \n区域，在最后一行加入“LoadModule rewrite_module \nmodules/mod_rewrite.so”（必选独占一行），然后重启apache服务器即可。<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<br />\n2.让apache服务器支持.htaccess<br />\n如\n何让自己的本地APACHE服务器支持”.htaccess”呢?其实只要简单修改一下apache的httpd.conf设置就可以让APACHE支 \n持.htaccess了。打开httpd.conf文件(在那里? \nAPACHE目录的CONF目录里面),用文本编辑器打开后,查找&lt;Directory /&gt;Options \nFollowSymLinksAllowOverride None&lt;/Directory&gt;改为&lt;Directory \n/&gt;Options FollowSymLinksAllowOverride All&lt;/Directory&gt;就可以了。<br />\n<br />\n3.建立.htaccess 文件<br />\n如\n果是在windows平台下，刚开始还真不知道怎么建立”.htaccess”文件，因为这个文件实际上没有文件名，仅仅只有扩展名，通过普通方式是无法\n建立这个文件的，别着急，马上告诉你三种方法：三种方法都是先建立一个htaccess.txt的文本文件（当然，这个文本文件的名字你可以随便取），然\n后有三种方式给这个文件重命名：（1）用记事本 \n打开，点击文件–另存为，在文件名窗口输入”.htaccess”，注意是整个绿色部分，也就是包含英文引号，然后点击保存就行了。（2）进入cmd命令\n 窗口，通过cd切换当刚建立htaccess.txt文件的文件夹，然后输入命令：rename htaccess.txt .htaccess \n，然后点击键盘Enter键即可。（3）通过ftp连接htaccess.txt所在文件夹，通过ftp软件重命名。<br />\n<br />\n4.rewrite规则学习<br />\n我们新建一个.htaccess文件之后，就在里面写入以下内容：<br />\nRewriteEngine on #rewriteengine为重写引擎开关on为开启off为关闭<br />\nRewriteRule ([0-9]{1,})$ index.php?id=$1<br />\n<br />\n我讲解一下RewriteRule：RewriteRule是重写规则，支持正则表达式的，上面的([0-9]{1,})是指由数字组成的，$是结束标志，说明是以数字结束！<br />\n好吧，现在我们可以实现伪静态页面了，写下一下的规则：<br />\nRewriteEngine on&nbsp;<br />\nRewriteRule ([a-zA-Z]{1,})-([0-9]{1,})\\.html$ index.php?action=$1&amp;id=$2\n</p>\n<p style="color:#6D6D6D;">\n	-------------------------------------------------------------------------------------------------------------\n</p>\n<p style="color:#6D6D6D;">\n	<strong>1.检测Apache是否支持mod_rewrite</strong> \n</p>\n<p style="color:#6D6D6D;">\n	通过php提供的phpinfo()函数查看环境配置，通过Ctrl+F查找到“Loaded Modules”，其中列出了所有apache2handler已经开启的模块，如果里面包括“mod_rewrite”，则已经支持，不再需要继续设置。\n</p>\n<p style="color:#6D6D6D;">\n	如果没有开启“mod_rewrite”，则打开目录 您的apache安装目录“/apache/conf/” 下的 httpd.conf 文件，通过Ctrl+F查找到“LoadModule rewrite_module”，将前面的”#”号删除即可。\n</p>\n<p style="color:#6D6D6D;">\n	如果没有查找到，则到“LoadModule” 区域，在最后一行加入“LoadModule rewrite_module modules/mod_rewrite.so”（必选独占一行），然后重启apache服务器即可。\n</p>\n<p style="color:#6D6D6D;">\n	<strong>2.让apache服务器支持.htaccess</strong> \n</p>\n<p style="color:#6D6D6D;">\n	如\n何让自己的本地APACHE服务器支持”.htaccess”呢?其实只要简单修改一下apache的httpd.conf设置就可以让APACHE支 \n持.htaccess了。打开httpd.conf文件(在那里? APACHE目录的CONF目录里面),用文本编辑器打开后,查找\n</p>\n<p style="color:#6D6D6D;">\n	<span style="color:#FF0000;">&lt;Directory /&gt;</span> \n</p>\n<p style="color:#6D6D6D;">\n	Options FollowSymLinks\n</p>\n<p style="color:#6D6D6D;">\n	AllowOverride<strong>&nbsp;None</strong> \n</p>\n<p style="color:#6D6D6D;">\n	&lt;/Directory&gt;\n</p>\n<p style="color:#6D6D6D;">\n	改为\n</p>\n<p style="color:#6D6D6D;">\n	<span style="color:#FF0000;">&lt;Directory /&gt;</span> \n</p>\n<p style="color:#6D6D6D;">\n	Options FollowSymLinks\n</p>\n<p style="color:#6D6D6D;">\n	AllowOverride&nbsp;<strong>All</strong> \n</p>\n<p style="color:#6D6D6D;">\n	&lt;/Directory&gt;\n</p>\n<p style="color:#6D6D6D;">\n	就可以了。\n</p>\n<p style="color:#6D6D6D;">\n	<strong>3.建立.htaccess 文件</strong> \n</p>\n<p style="color:#6D6D6D;">\n	如\n果是在windows平台下，刚开始还真不知道怎么建立”.htaccess”文件，因为这个文件实际上没有文件名，仅仅只有扩展名，通过普通方式是无法\n建立这个文件的，别着急，马上告诉你三种方法：三种方法都是先建立一个htaccess.txt的文本文件（当然，这个文本文件的名字你可以随便取），然\n后有三种方式给这个文件重命名：\n</p>\n<p style="color:#6D6D6D;">\n	（1）用记事本 打开，点击文件–另存为，在文件名窗口输入”.htaccess”，注意是整个绿色部分，也就是包含英文引号，然后点击保存就行了。\n</p>\n<p style="color:#6D6D6D;">\n	（2）进入cmd命令 窗口，通过cd切换当刚建立htaccess.txt文件的文件夹，然后输入命令：rename htaccess.txt .htaccess ，然后点击键盘Enter键即可。\n</p>\n<p style="color:#6D6D6D;">\n	（3）通过ftp连接htaccess.txt所在文件夹，通过ftp软件重命名。\n</p>\n<p style="color:#6D6D6D;">\n	<strong>4.rewrite规则学习</strong> \n</p>\n<p style="color:#6D6D6D;">\n	我们新建一个.htaccess文件之后，就在里面写入以下内容：\n</p>\n<p style="color:#6D6D6D;">\n	<span style="color:#FF0000;">RewriteEngine on</span>&nbsp;#rewriteengine为重写引擎开关on为开启off为关闭\n</p>\n<p style="color:#6D6D6D;">\n	<span style="color:#FF0000;">RewriteRule ([0-9]{1,})$ index.php?id=$1</span> \n</p>\n<p style="color:#6D6D6D;">\n	我讲解一下RewriteRule：RewriteRule是重写规则，支持正则表达式的，上面的([0-9]{1,})是指由数字组成的，$是结束标志，说明是以数字结束！\n</p>\n<p style="color:#6D6D6D;">\n	好吧，现在我们可以实现伪静态页面了，写下一下的规则：\n</p>\n<p style="color:#6D6D6D;">\n	<span style="color:#FF0000;">RewriteEngine on</span> \n</p>\n<p style="color:#6D6D6D;">\n	<span style="color:#FF0000;">RewriteRule</span>&nbsp;<span style="color:#993300;">([a-zA-Z]{1,})-([0-9]{1,})\\.html$</span>&nbsp;<span style="color:#000080;">index.php?action=$1&amp;id=$2</span> \n</p>\n<p style="color:#6D6D6D;">\n	([a-zA-Z]{1,})-([0-9]{1,})\\.html$是规则，index.php?action=$1&amp;id=$2是要替换的格式，$1代表第一个括号匹配的值，$2代表第二个，如此类推！！\n</p>\n</span>', 2, 0, '伪静态 PHP'),
(3, 31, 0, 'jQuery获取和操作元素的属性和CSS样式', '', '', 8, '1353304797', '<h1>\n	元素属性和Dom属性\n</h1>\n<p>\n	我们通常将id,src,alt,class称为属性,也即元素属性.但是,当浏览器对标签元素进行解析时,会将元素解析为Dom对象,相应的,元素属性也就解析为Dom属性.\n</p>\n<p>\n	元素属性和Dom属性只是在我们对其进行不同解析时的不同称呼.\n</p>\n<p>\n	&nbsp;对于下面这样一个标签元素:\n</p>\n<blockquote>\n	<div class="wp_codebox">\n<pre><span style="color:blue;">&lt;</span><span style="color:maroon;">img </span><span style="color:red;">id</span><span style="color:blue;">=''img'' </span><span style="color:red;">src</span><span style="color:blue;">="1.jpg" </span><span style="color:red;">alt</span><span style="color:blue;">=''1'' </span><span style="color:red;">class</span><span style="color:blue;">="imgs"&gt;&lt;/</span><span style="color:maroon;">img</span><span style="color:blue;">&gt;</span>&nbsp;</pre>\n	</div>\n</blockquote>\n<p>\n	值得注意的是:\n</p>\n<blockquote>\n	<p>\n		1.元素被解析成Dom时,元素属性和Dom属性并不一定是原来的名称.\n	</p>\n	<p>\n		例如,img的class属性,在表现为元素属性时是class;在表现为Dom属性时,属性名为className\n	</p>\n	<p>\n		2.在JavaScript中,我们可以直接获取或设置Dom属性\n	</p>\n</blockquote>\n<h1>\n	使用jQuery操作元素属性\n</h1>\n<p>\n	在jQuery中,提供了attr函数来操作元素属性,具体如下:\n</p>\n<blockquote>\n	<table border="1" cellpadding="2" cellspacing="0" height="372" width="729">\n		<tbody>\n			<tr>\n				<td align="center" width="124">\n					函数名\n				</td>\n				<td align="center" width="382">\n					说明\n				</td>\n				<td align="center" width="436">\n					例子\n				</td>\n			</tr>\n			<tr>\n				<td width="128">\n					attr(name)\n				</td>\n				<td width="382">\n					取得<strong>第一个</strong>匹配元素的属性值.\n				</td>\n				<td width="436">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).attr(<span style="color:maroon;">"value"</span>)</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="131">\n					attr(property)\n				</td>\n				<td width="382">\n					将一个"名/值"形式的对象设置为<strong>所有匹配</strong>元素的属性\n				</td>\n				<td width="436">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).attr({ value: <span style="color:maroon;">"txt"</span>, title: <span style="color:maroon;">"text" </span>});</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="134">\n					attr(key,value)\n				</td>\n				<td width="382">\n					为<strong>所有匹配</strong>的元素设置一个属性值\n				</td>\n				<td width="436">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).attr(<span style="color:maroon;">"value"</span>,<span style="color:maroon;">"txt"</span>);</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="137">\n					attr(key,fn)\n				</td>\n				<td width="382">\n					为<strong>所有匹配</strong>的元素设置一个计算的属性值\n				</td>\n				<td width="436">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).attr(<span style="color:maroon;">"title"</span>, <span style="color:blue;">function </span>() { <span style="color:blue;">return this</span>.value });</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="139">\n					removeAttr(name)\n				</td>\n				<td width="382">\n					从<strong>所有匹配</strong>的元素中删除一个属性\n				</td>\n				<td width="436">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).removeAttr(<span style="color:maroon;">"value"</span>);</pre>\n					</div>\n				</td>\n			</tr>\n		</tbody>\n	</table>\n</blockquote>\n<p>\n	注意:\n</p>\n<blockquote>\n	<p>\n		1.如果要设置对象的class属性时,必须使用className作为属性名.\n	</p>\n	<p>\n		2.我们可以使用removeAttr删除元素属性,但其对应的Dom属性是不会被删除掉的,只是被改变其值而已\n	</p>\n</blockquote>\n<p>\n	根据上面的几个函数,我们可以这样使用来获取dom的value值和innerHTML值:\n</p>\n<blockquote>\n	<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#txt1"</span>).attr(<span style="color:maroon;">"value"</span>)\n$(<span style="color:maroon;">"#txt1"</span>).attr(<span style="color:maroon;">"value"</span>, <span style="color:maroon;">"1234"</span>);\n\n$(<span style="color:maroon;">"#dv1"</span>).attr(<span style="color:maroon;">"innerHTML"</span>, <span style="color:maroon;">''this is a div''</span>);\n$(<span style="color:maroon;">"#dv1"</span>).attr(<span style="color:maroon;">"innerHTML"</span>);</pre>\n	</div>\n</blockquote>\n<p>\n	实际上,jQuery提供了更简单的方法来访问value,innerHTML,具体函数如下:\n</p>\n<blockquote>\n	<table border="1" cellpadding="2" cellspacing="0" height="381" width="730">\n		<tbody>\n			<tr>\n				<td align="center" width="185">\n					函数名\n				</td>\n				<td align="center" width="362">\n					说明\n				</td>\n				<td align="center" width="395">\n					例子\n				</td>\n			</tr>\n			<tr>\n				<td width="185">\n					val()\n				</td>\n				<td width="362">\n					获取第一个匹配元素的value值\n				</td>\n				<td width="395">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#txt1"</span>).val()</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="185">\n					val(val)\n				</td>\n				<td width="362">\n					为匹配的元素设置value值\n				</td>\n				<td width="395">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#txt1"</span>).val(<span style="color:maroon;">"txt1"</span>)</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="185">\n					html()\n				</td>\n				<td width="362">\n					获取第一个匹配元素的html内容\n				</td>\n				<td width="395">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#dv1"</span>).html()</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="185">\n					html(val)\n				</td>\n				<td width="362">\n					设置每一个匹配的元素的html内容\n				</td>\n				<td width="395">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#dv1"</span>).html(<span style="color:maroon;">"this is a div"</span>)</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="185">\n					text()\n				</td>\n				<td width="362">\n					取得所有匹配文本节点的内容,并将其连接起来\n				</td>\n				<td width="395">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"div"</span>).text()</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="185">\n					text(val)\n				</td>\n				<td width="362">\n					将所有匹配元素的置为val\n				</td>\n				<td width="395">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"div"</span>).text(<span style="color:maroon;">"divs"</span>)</pre>\n					</div>\n				</td>\n			</tr>\n		</tbody>\n	</table>\n</blockquote>\n<h1>\n	使用jQuery操作CSS\n</h1>\n<p>\n	1.修改CSS类\n</p>\n<blockquote>\n	<table border="1" cellpadding="2" cellspacing="0" height="409" width="730">\n		<tbody>\n			<tr>\n				<td align="center" width="185">\n					函数名\n				</td>\n				<td align="center" width="362">\n					说明\n				</td>\n				<td align="center" width="395">\n					例子\n				</td>\n			</tr>\n			<tr>\n				<td width="185">\n					addClass(classes)\n				</td>\n				<td width="362">\n					为<strong>每个匹配</strong>的元素添加指定的类名\n				</td>\n				<td width="395">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).addClass(<span style="color:maroon;">"colorRed borderBlack"</span>);</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="185">\n					hasClass(class)\n				</td>\n				<td width="362">\n					判断匹配元素集合中是否<strong>至少有一个</strong>包含了指定的css类,如果有一个含有指定css类,则返回true\n				</td>\n				<td width="395">\n					<div class="wp_codebox">\n<pre>alert($(<span style="color:maroon;">"input"</span>).hasClass(<span style="color:maroon;">"borderBlack"</span>));</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="185">\n					removeClass([classes])\n				</td>\n				<td width="362">\n					从匹配元素中移除所有或指定的css类\n				</td>\n				<td width="395">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).removeClass(<span style="color:maroon;">"colorRed borderBlack"</span>);</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="184">\n					toggleClass(classes)\n				</td>\n				<td width="362">\n					如果存在(不存在)就删除(添加)指定类\n				</td>\n				<td width="395">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).toggleClass(<span style="color:maroon;">"colorRed borderBlack"</span>);</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="184">\n					toggleClass(classes,switch)\n				</td>\n				<td width="362">\n					当switch是true时,添加类,switch为false时,删除类\n				</td>\n				<td width="395">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).toggleClass(<span style="color:maroon;">"colorRed borderBlack"</span>, <span style="color:blue;">true</span>);</pre>\n					</div>\n				</td>\n			</tr>\n		</tbody>\n	</table>\n	<p>\n		注意:\n	</p>\n	<p>\n		1.addClass、removeClass、toggleClass均可添加多个类,多个类之间用空格隔开\n	</p>\n	<p>\n		2.removeClass方法的参数可选,如果有参数,则删除指定class,如果无参数,则删除匹配元素的所有class\n	</p>\n	<p>\n		3.在调用toggleClass(classes,switch)时,我们可以有更多的用法,例如:\n	</p>\n	<div class="wp_codebox">\n<pre><span style="color:#006400;">//每当按钮被点击三次时,添加样式 </span><span style="color:blue;">var </span>i = 0;\n$(<span style="color:maroon;">"#btn"</span>).click(<span style="color:blue;">function </span>() {\n    $(<span style="color:maroon;">"input"</span>).toggleClass(<span style="color:maroon;">"colorRed borderBlack"</span>, <span style="color:blue;">true</span>);\n});</pre>\n	</div>\n</blockquote>\n<p>\n	2.修改CSS样式\n</p>\n<blockquote>\n	<table border="1" cellpadding="2" cellspacing="0" height="220" width="730">\n		<tbody>\n			<tr>\n				<td align="center" width="137">\n					函数名\n				</td>\n				<td align="center" width="334">\n					说明\n				</td>\n				<td align="center" width="467">\n					例子\n				</td>\n			</tr>\n			<tr>\n				<td width="142">\n					css(name)\n				</td>\n				<td width="334">\n					访问<strong>第一个</strong>匹配元素的样式属性\n				</td>\n				<td width="467">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).css(<span style="color:maroon;">"color"</span>)</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="146">\n					css(properties)\n				</td>\n				<td width="334">\n					把一个"名/值"对设置给所有匹配元素的样式属性\n				</td>\n				<td width="467">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).css({border:<span style="color:maroon;">"solid 3px silver"</span>,color:<span style="color:maroon;">"red"</span>})</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="150">\n					css(name,value)\n				</td>\n				<td width="334">\n					为匹配的元素设置同一个样式属性<br />\n如果是数字,将自动转换为像素值\n				</td>\n				<td width="467">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).css(<span style="color:maroon;">"border-width"</span>,<span style="color:maroon;">"5"</span>);</pre>\n					</div>\n				</td>\n			</tr>\n		</tbody>\n	</table>\n</blockquote>\n<blockquote>\n	<p>\n		注意:\n	</p>\n	<p>\n		对于样式值为数字的代码示例及结果:\n	</p>\n	<table border="1" cellpadding="2" cellspacing="0" height="122" width="730">\n		<tbody>\n			<tr>\n				<td align="center" width="284">\n					示例\n				</td>\n				<td align="center" width="506">\n					生成的源码\n				</td>\n			</tr>\n			<tr>\n				<td width="339">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"input"</span>).css(<span style="color:maroon;">"border-width"</span>,<span style="color:maroon;">"5"</span>);</pre>\n					</div>\n				</td>\n				<td width="560">\n					<div class="wp_codebox">\n<pre><span style="color:blue;">&lt;</span><span style="color:maroon;">input </span><span style="color:red;">style</span><span style="color:blue;">="</span><span style="color:red;">BORDER-RIGHT-WIDTH</span><span style="color:blue;">: 5px;\n&nbsp;</span><span style="color:red;">BORDER-TOP-WIDTH</span><span style="color:blue;">: 5px; </span><span style="color:red;">BORDER-BOTTOM-WIDTH</span><span style="color:blue;">: 5px;\n&nbsp;</span><span style="color:red;">BORDER-LEFT-WIDTH</span><span style="color:blue;">: 5px" </span><span style="color:red;">id</span><span style="color:blue;">="txt1" /&gt;</span></pre>\n					</div>\n				</td>\n			</tr>\n		</tbody>\n	</table>\n</blockquote>\n<p>\n	注意:\n</p>\n<blockquote>\n	<p>\n		对于一些常用的属性,例如width,height之类,使用attr("width")和css("width")是无法正常获取其值的,现在,我们来介绍一些常用的属性.\n	</p>\n</blockquote>\n<h1>\n	获取常用的属性\n</h1>\n<p>\n	1.宽、高相关\n</p>\n<blockquote>\n	<table border="1" cellpadding="2" cellspacing="0" height="497" width="730">\n		<tbody>\n			<tr>\n				<td align="center" width="197">\n					函数名\n				</td>\n				<td align="center" width="459">\n					说明\n				</td>\n				<td align="center" width="277">\n					例子\n				</td>\n			</tr>\n			<tr>\n				<td width="197">\n					width()\n				</td>\n				<td width="459">\n					获取<strong>第一个</strong>匹配元素的宽度,默认为px\n				</td>\n				<td width="281">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#txt1"</span>).width()</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="197">\n					width(val)\n				</td>\n				<td width="459">\n					为匹配的元素设置宽度值,默认为px\n				</td>\n				<td width="284">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#txt1"</span>).width(200)</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="197">\n					height()\n				</td>\n				<td width="459">\n					获取<strong>第一个</strong>匹配元素的高度,默认为px\n				</td>\n				<td width="287">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#txt1"</span>).height()</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="197">\n					height(val)\n				</td>\n				<td width="459">\n					为匹配的元素设置宽度值,默认为px\n				</td>\n				<td width="289">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#txt1"</span>).height(20)</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="197">\n					innerWidth()\n				</td>\n				<td width="459">\n					获取<strong>第一个</strong>匹配元素内部区域宽度(包括padding,不包括border)\n				</td>\n				<td width="291">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#txt1"</span>).innerWidth()</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="197">\n					innerHeight()\n				</td>\n				<td width="459">\n					获取<strong>第一个</strong>匹配元素内部区域高度(包括padding,不包括border)\n				</td>\n				<td width="293">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#txt1"</span>).innerHeight()</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="197">\n					outerWidth([margin])\n				</td>\n				<td width="459">\n					获取<strong>第一个</strong>匹配元素外部区域宽度(包括padding,border)<br />\nmargin为true则包括margin,否则不包括\n				</td>\n				<td width="294">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#txt1"</span>).outerWidth()</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="197">\n					outerHeight([margin])\n				</td>\n				<td width="459">\n					获取<strong>第一个</strong>匹配元素外部区域高度(包括padding,border)<br />\nmargin为true则包括margin,否则不包括\n				</td>\n				<td width="296">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#txt1"</span>).outerHeight(<span style="color:blue;">true</span>)</pre>\n					</div>\n				</td>\n			</tr>\n		</tbody>\n	</table>\n	<p>\n		注意:\n	</p>\n	<p>\n		返回的高度、宽度均为数字,不带px\n	</p>\n	<p>\n		参照一张图,会更容易理解些.\n	</p>\n	<p>\n		<a href="http://images.cnblogs.com/cnblogs_com/oneword/WindowsLiveWriter/jQuery_9547/image.png"><img src="http://images.cnblogs.com/cnblogs_com/oneword/WindowsLiveWriter/jQuery_9547/image_thumb.png" alt="" height="459" width="730" /></a> \n	</p>\n</blockquote>\n<p>\n	2.位置相关\n</p>\n<blockquote>\n	<p>\n		在设计一些弹出对象的脚本中,经常需要动态获取弹出坐标并且设置元素的位置.jQuery为我们提供了位置相关的各个函数.\n	</p>\n	<table border="1" cellpadding="2" cellspacing="0" height="411" width="730">\n		<tbody>\n			<tr>\n				<td align="center" width="129">\n					函数名\n				</td>\n				<td align="center" width="390">\n					说明\n				</td>\n				<td align="center" width="410">\n					例子\n				</td>\n			</tr>\n			<tr>\n				<td width="132">\n					offset()\n				</td>\n				<td width="390">\n					获取匹配元素在当前窗口的相对偏移<br />\n<strong>只对可见元素有效</strong> \n				</td>\n				<td width="410">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#btn"</span>).offset().top\n$(<span style="color:maroon;">"#btn"</span>).offset().left</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="135">\n					position()\n				</td>\n				<td width="390">\n					获取匹配元素相对父元素的偏移<br />\n<strong>只对可见元素有效</strong> \n				</td>\n				<td width="410">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"#btn"</span>).position().top\n$(<span style="color:maroon;">"#btn"</span>).position().left</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="137">\n					scrollTop()\n				</td>\n				<td width="390">\n					获取匹配元素相对滚动条顶部的偏移<br />\n<strong>对可见元素和隐藏元素均有效</strong> \n				</td>\n				<td width="410">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"div"</span>).scrollTop()</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="139">\n					scrollTop(val)\n				</td>\n				<td width="390">\n					设置垂直滚动条顶部偏移为该值<br />\n<strong>对可见元素和隐藏元素均有效</strong> \n				</td>\n				<td width="410">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"div"</span>).scrollTop(200)</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="140">\n					scrollLeft()\n				</td>\n				<td width="390">\n					获取匹配元素相对滚动条左部的偏移<br />\n<strong>对可见元素和隐藏元素均有效</strong> \n				</td>\n				<td width="410">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"div"</span>).scrollLeft()</pre>\n					</div>\n				</td>\n			</tr>\n			<tr>\n				<td width="141">\n					scrollLeft(val)\n				</td>\n				<td width="390">\n					设置水平滚动条左侧的偏移<br />\n<strong>对可见元素和隐藏元素均有效</strong> \n				</td>\n				<td width="410">\n					<div class="wp_codebox">\n<pre>$(<span style="color:maroon;">"div"</span>).scrollLeft(200)</pre>\n					</div>\n				</td>\n			</tr>\n		</tbody>\n	</table>\n</blockquote>\n<blockquote>\n	<p>\n		注意:\n	</p>\n	<p>\n		offset方法是相对于当前窗口的相对偏移,而position方法是相对于父元素的偏移\n	</p>\n</blockquote>\n<p>\n	--选自《从零开始学习jQuery》\n</p>', 2, 0, 'Jquery');
INSERT INTO `yulin_archive` (`id`, `sortid`, `paixu`, `title`, `style`, `author`, `clicks`, `creattime`, `content`, `status`, `attribute`, `tags`) VALUES
(4, 9, 0, 'ThinkPHP3.1 查询语言', '', '', 23, '1356944446', '查询方式\n<p>\n	ThinkPHP可以支持直接使用字符串作为查询条件，但是大多数情况推荐使用索引数组或者对象来作为查询条件，因为会更加安全。\n</p>\n<p>\n	一、使用字符串作为查询条件\n</p>\n<p>\n	这是最传统的方式，但是安全性不高，例如：\n</p>\n<pre class="brush:php;">    $User = M("User"); // 实例化User对象\n   $User-&gt;where(''type=1 AND status=1'')-&gt;select(); </pre>\n<p>\n	最后生成的SQL语句是\n</p>\n<pre class="brush:sql;">   SELECT * FROM think_user WHERE type=1 AND status=1</pre>\n<p>\n	采用字符串查询的时候，我们可以配合使用新版提供的字符串条件的安全预处理机制，暂且不再细说。\n</p>\n<p>\n	二、使用数组作为查询条件\n</p>\n<p>\n	这种方式是最常用的查询方式，例如：\n</p>\n<pre class="brush:php;">    $User = M("User"); // 实例化User对象\n\n   $condition[''name''] = ''thinkphp'';\n\n   $condition[''status''] = 1;\n\n   // 把查询条件传入查询方法\n\n   $User-&gt;where($condition)-&gt;select(); </pre>\n<p>\n	最后生成的SQL语句是\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:sql;">   SELECT * FROM think_user WHERE `name`=''thinkphp'' AND status=1</pre>\n<p>\n	<br />\n</p>\n<p>\n	如果进行多字段查询，那么字段之间的默认逻辑关系是 逻辑与 AND，但是用下面的规则可以更改默认的逻辑判断，通过使用 _logic 定义查询逻辑：\n</p>\n<pre class="brush:php;">    $User = M("User"); // 实例化User对象\n\n   $condition[''name''] = ''thinkphp'';\n\n   $condition[''account''] = ''thinkphp'';\n\n   $condition[''_logic''] = ''OR'';\n\n   // 把查询条件传入查询方法\n\n   $User-&gt;where($condition)-&gt;select(); </pre>\n<p>\n	最后生成的SQL语句是\n</p>\n<pre class="brush:sql;">   SELECT * FROM think_user WHERE `name`=''thinkphp'' OR `account`=''thinkphp''</pre>\n<p>\n	三、使用对象方式来查询\n</p>\n<p>\n	这里以stdClass内置对象为例：\n</p>\n<pre class="brush:php;">    $User = M("User"); // 实例化User对象\n\n   // 定义查询条件\n\n   $condition = new stdClass();\n\n   $condition-&gt;name = ''thinkphp'';\n\n   $condition-&gt;status= 1;\n\n   $User-&gt;where($condition)-&gt;select(); </pre>\n<p>\n	复制代码\n</p>\n<p>\n	最后生成的SQL语句和上面一样\n</p>\n<pre class="brush:sql;">SELECT * FROM think_user WHERE `name`=''thinkphp'' AND status=1</pre>\n<p>\n	使用对象方式查询和使用数组查询的效果是相同的，并且是可以互换的，大多数情况下，我们建议采用数组方式更加高效。\n</p>\n<p>\n	表达式查询\n</p>\n<p>\n	上面的查询条件仅仅是一个简单的相等判断，可以使用查询表达式支持更多的SQL查询语法，也是ThinkPHP查询语言的精髓，查询表达式的使用格式：\n</p>\n<p>\n	$map[''字段名''] = array(''表达式'',''查询条件'');\n</p>\n<p>\n	表达式不分大小写，支持的查询表达式有下面几种，分别表示的含义是：\n</p>\n<p>\n	表达式 	含义\n</p>\n<p>\n	EQ 	等于（=）\n</p>\n<p>\n	NEQ 	不等于（&lt;&gt;）\n</p>\n<p>\n	GT 	大于（&gt;）\n</p>\n<p>\n	EGT 	大于等于（&gt;=）\n</p>\n<p>\n	LT 	小于（&lt;）\n</p>\n<p>\n	ELT 	小于等于（&lt;=）\n</p>\n<p>\n	LIKE 	模糊查询\n</p>\n<p>\n	[NOT] BETWEEN 	（不在）区间查询\n</p>\n<p>\n	[NOT] IN 	（不在）IN 查询\n</p>\n<p>\n	EXP 	表达式查询，支持SQL语法\n</p>\n<p>\n	示例如下：\n</p>\n<p>\n	EQ ：等于（=）\n</p>\n<p>\n	例如：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''eq'',100);</pre>\n<p>\n	<br />\n</p>\n<p>\n	和下面的查询等效\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">  $map[''id'']  = 100;</pre>\n<p>\n	<br />\n</p>\n<p>\n	表示的查询条件就是 id = 100\n</p>\n<p>\n	NEQ： 不等于（&lt;&gt;）\n</p>\n<p>\n	例如：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''neq'',100);</pre>\n<p>\n	<br />\n</p>\n<p>\n	表示的查询条件就是 id &lt;&gt; 100\n</p>\n<p>\n	GT：大于（&gt;）\n</p>\n<p>\n	例如：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''gt'',100);</pre>\n<p>\n	<br />\n</p>\n<p>\n	表示的查询条件就是 id &gt; 100\n</p>\n<p>\n	EGT：大于等于（&gt;=）\n</p>\n<p>\n	例如：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''egt'',100);</pre>\n<p>\n	<br />\n</p>\n<p>\n	表示的查询条件就是 id &gt;= 100\n</p>\n<p>\n	LT：小于（&lt;）\n</p>\n<p>\n	例如：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''lt'',100);</pre>\n<p>\n	<br />\n</p>\n<p>\n	表示的查询条件就是 id &lt; 100\n</p>\n<p>\n	ELT： 小于等于（&lt;=）\n</p>\n<p>\n	例如：\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''elt'',100);</pre>\n<p>\n	表示的查询条件就是 id &lt;= 100\n</p>\n<p>\n	[NOT] LIKE： 同sql的LIKE\n</p>\n<p>\n	例如：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">   $map[''name''] = array(''like'',''thinkphp%'');</pre>\n<p>\n	<br />\n</p>\n<p>\n	查询条件就变成 name like ''thinkphp%''\n</p>\n<p>\n	如果配置了DB_LIKE_FIELDS参数的话，某些字段也会自动进行模糊查询。例如设置了：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">   ''DB_LIKE_FIELDS''=&gt;''title|content''</pre>\n<p>\n	<br />\n</p>\n<p>\n	的话，使用\n</p>\n<pre class="brush:php;">   $map[''title''] = ''thinkphp'';\n</pre>\n<p>\n	查询条件就会变成 title like ''%thinkphp%''\n</p>\n<p>\n	支持数组方式，例如\n</p>\n<pre class="brush:php;">   $map[''a''] =array(''like'',array(''%thinkphp%'',''%tp''),''OR'');\n   $map[''b''] =array(''notlike'',array(''%thinkphp%'',''%tp''),''AND'');</pre>\n<p>\n	生成的查询条件就是：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:sql;">   (a like ''%thinkphp%'' OR a like ''%tp'') AND (b not like ''%thinkphp%'' AND b not like ''%tp'')</pre>\n<p>\n	<br />\n</p>\n<p>\n	[NOT] BETWEEN ：同sql的[not] between， 查询条件支持字符串或者数组，例如：\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''between'',''1,8'');</pre>\n<p>\n	和下面的等效：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''between'',array(''1'',''8''));</pre>\n<p>\n	<br />\n</p>\n<p>\n	查询条件就变成 id BETWEEN 1 AND 8\n</p>\n<p>\n	[NOT] IN： 同sql的[not] in ，查询条件支持字符串或者数组，例如：\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''not in'',''1,5,8'');</pre>\n<p>\n	和下面的等效：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''not in'',array(''1'',''5'',''8''));</pre>\n<p>\n	<br />\n</p>\n<p>\n	查询条件就变成 id NOT IN (1,5, 8)\n</p>\n<p>\n	EXP：表达式，支持更复杂的查询情况\n</p>\n<p>\n	例如：\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''in'',''1,3,8'');</pre>\n<p>\n	可以改成：\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(''exp'','' IN (1,3,8) '');</pre>\n<p>\n	exp查询的条件不会被当成字符串，所以后面的查询条件可以使用任何SQL支持的语法，包括使用函数和字段名称。查询表达式不仅可用于查询条件，也可以用于数据更新，例如：\n</p>\n<pre class="brush:php;">   $User = M("User"); // 实例化User对象\n\n   // 要修改的数据对象属性赋值\n\n   $data[''name''] = ''ThinkPHP'';\n\n   $data[''score''] = array(''exp'',''score+1'');// 用户的积分加1\n\n   $User-&gt;where(''id=5'')-&gt;save($data); // 根据条件保存修改的数据</pre>\n<p>\n	快捷查询\n</p>\n<p>\n	从3.0版本开始，增加了快捷查询方式，可以进一步简化查询条件的写法，例如：\n</p>\n<p>\n	一、实现不同字段相同的查询条件\n</p>\n<pre class="brush:php;">   $User = M("User"); // 实例化User对象\n\n   $map[''name|title''] = ''thinkphp'';\n\n   // 把查询条件传入查询方法\n\n   $User-&gt;where($map)-&gt;select();</pre>\n<p>\n	查询条件就变成\n</p>\n<pre class="brush:sql;"> name= ''thinkphp'' OR title = ''thinkphp''</pre>\n<p>\n	二、实现不同字段不同的查询条件\n</p>\n<pre class="brush:php;">    $User = M("User"); // 实例化User对象\n\n   $map[''status&amp;title''] =array(''1'',''thinkphp'',''_multi''=&gt;true);\n\n   // 把查询条件传入查询方法\n\n   $User-&gt;where($map)-&gt;select(); </pre>\n<p>\n	''_multi''=&gt;true必须加在数组的最后，表示当前是多条件匹配，这样查询条件就变成\n</p>\n<p>\n	&nbsp; &nbsp;status= 1 AND title = ''thinkphp''\n</p>\n<p>\n	，查询字段支持更多的，例如：\n</p>\n<pre class="brush:php;">   $map[''status&amp;score&amp;title''] =array(''1'',array(''gt'',''0''),''thinkphp'',''_multi''=&gt;true);</pre>\n<p>\n	查询条件就变成\n</p>\n<pre class="brush:sql;">   status= 1 AND score &gt;0 AND  title = ''thinkphp''</pre>\n<p>\n	注意：快捷查询方式中“|”和“&amp;”不能同时使用。\n</p>\n<p>\n	区间查询\n</p>\n<p>\n	ThinkPHP支持对某个字段的区间查询，例如：\n</p>\n<pre class="brush:php;">   $map[''id''] = array(array(''gt'',1),array(''lt'',10)) ;</pre>\n<br />\n<p>\n	得到的查询条件是： (`id` &gt; 1) AND (`id` &lt; 10)\n</p>\n<pre class="brush:php;">   $map[''id''] = array(array(''gt'',3),array(''lt'',10), ''or'') ;</pre>\n<p>\n	得到的查询条件是： (`id` &gt; 3) OR (`id` &lt; 10)\n</p>\n<pre class="brush:php;">   $map[''id'']  = array(array(''neq'',6),array(''gt'',3),''and'');</pre>\n<p>\n	得到的查询条件是：(`id` != 6) AND (`id` &gt; 3)\n</p>\n<p>\n	最后一个可以是AND、 OR或者 XOR运算符，如果不写，默认是AND运算。\n</p>\n<p>\n	区间查询的条件可以支持普通查询的所有表达式，也就是说类似LIKE、GT和EXP这样的表达式都可以支持。另外区间查询还可以支持更多的条件，只要是针对一个字段的条件都可以写到一起，例如：\n</p>\n<pre class="brush:php;">   $map[''name'']  = array(array(''like'',''%a%''), array(''like'',''%b%''), array(''like'',''%c%''), \n''ThinkPHP'',''or'');</pre>\n<p>\n	最后的查询条件是：\n</p>\n<pre class="brush:sql;">   (`name` LIKE ''%a%'') OR (`name` LIKE ''%b%'') OR (`name` LIKE ''%c%'') OR (`name` = ''ThinkPHP'')</pre>\n<p>\n	组合查询\n</p>\n<p>\n	组合查询的主体还是采用数组方式查询，只是加入了一些特殊的查询支持，包括字符串模式查询（_string）、复合查询（_complex）、请求字符串查询（_query），混合查询中的特殊查询每次查询只能定义一个，由于采用数组的索引方式，索引相同的特殊查询会被覆盖。\n</p>\n<p>\n	一、字符串模式查询（采用_string 作为查询条件）\n</p>\n<p>\n	数组条件还可以和字符串条件混合使用，例如：\n</p>\n<pre class="brush:php;">    $User = M("User"); // 实例化User对象\n\n   $map[''id''] = array(''neq'',1);\n\n   $map[''name''] = ''ok'';\n\n   $map[''_string''] = ''status=1 AND score&gt;10'';\n\n   $User-&gt;where($map)-&gt;select(); </pre>\n<p>\n	最后得到的查询条件就成了：\n</p>\n<pre class="brush:sql;">   ( `id` != 1 ) AND ( `name` = ''ok'' ) AND ( status=1 AND score&gt;10 )</pre>\n<p>\n	二、请求字符串查询方式\n</p>\n<p>\n	请求字符串查询是一种类似于URL传参的方式，可以支持简单的条件相等判断。\n</p>\n<pre class="brush:php;">   $map[''id''] = array(''gt'',''100'');\n\n   $map[''_query''] = ''status=1&amp;score=100&amp;_logic=or'';</pre>\n<p>\n	得到的查询条件是：\n</p>\n<pre class="brush:sql;">   `id`&gt;100 AND (`status` = ''1'' OR `score` = ''100'')</pre>\n<p>\n	三、复合查询\n</p>\n<p>\n	复合查询相当于封装了一个新的查询条件，然后并入原来的查询条件之中，所以可以完成比较复杂的查询条件组装。\n</p>\n<p>\n	例如：\n</p>\n<pre class="brush:php;">    $where[''name'']  = array(''like'', ''%thinkphp%'');\n\n   $where[''title'']  = array(''like'',''%thinkphp%'');\n\n   $where[''_logic''] = ''or'';\n\n   $map[''_complex''] = $where;\n\n   $map[''id'']  = array(''gt'',1);</pre>\n<p>\n	查询条件是\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:sql;">   ( id &gt; 1) AND ( ( name like ''%thinkphp%'') OR ( title like ''%thinkphp%'') )</pre>\n<p>\n	复合查询使用了_complex作为子查询条件来定义，配合之前的查询方式，可以非常灵活的制定更加复杂的查询条件。\n</p>\n<p>\n	很多查询方式可以相互转换，例如上面的查询条件可以改成：\n</p>\n<pre class="brush:php;">   $where[''id''] = array(''gt'',1);\n\n   $where[''_string''] = '' (name like "%thinkphp%")  OR ( title like "%thinkphp") '';</pre>\n<p>\n	最后生成的SQL语句是一致的。\n</p>\n<p>\n	统计查询\n</p>\n<p>\n	在应用中我们经常会用到一些统计数据，例如当前所有（或者满足某些条件）的用户数、所有用户的最大积分、用户的平均成绩等等，ThinkPHP为这些统计操作提供了一系列的内置方法，包括：\n</p>\n<p>\n	方法 	说明\n</p>\n<p>\n	Count 	统计数量，参数是要统计的字段名（可选）\n</p>\n<p>\n	Max 	获取最大值，参数是要统计的字段名（必须）\n</p>\n<p>\n	Min 	获取最小值，参数是要统计的字段名（必须）\n</p>\n<p>\n	Avg 	获取平均值，参数是要统计的字段名（必须）\n</p>\n<p>\n	Sum 	获取总分，参数是要统计的字段名（必须）\n</p>\n<p>\n	用法示例：\n</p>\n<p>\n<pre class="brush:php;">   $User = M("User"); // 实例化User对象</pre>\n</p>\n<p>\n	获取用户数：\n</p>\n<pre class="brush:php;">   $userCount = $User-&gt;count();\n\n</pre>\n<p>\n	或者根据字段统计：\n</p>\n<pre class="brush:php;">   $userCount = $User-&gt;count("id");</pre>\n<p>\n	获取用户的最大积分：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">   $maxScore = $User-&gt;max(''score'');</pre>\n<p>\n	获取积分大于0的用户的最小积分：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:php;">   $minScore = $User-&gt;where(''score&gt;0'')-&gt;min(''score'');</pre>\n<p>\n	获取用户的平均积分：\n</p>\n<pre class="brush:php;">   $avgScore = $User-&gt;avg(''score'');</pre>\n<p>\n	统计用户的总成绩：\n</p>\n<pre class="brush:php;">   $sumScore = $User-&gt;sum(''score'');</pre>\n<p>\n	并且所有的统计查询均支持连贯操作的使用。\n</p>\n<p>\n	SQL查询\n</p>\n<p>\n	ThinkPHP内置的ORM和ActiveRecord模式实现了方便的数据存取操作，而且新版增加的连贯操作功能更是让这个数据操作更加清晰，但是ThinkPHP仍然保留了原生的SQL查询和执行操作支持，为了满足复杂查询的需要和一些特殊的数据操作，SQL查询的返回值因为是直接返回的Db类的查询结果，没有做任何的处理。主要包括下面两个方法：\n</p>\n<p>\n	1、query方法\n</p>\n<p>\n	query &nbsp;执行SQL查询操作\n</p>\n<p>\n	用法 	query($sql,$parse=false)\n</p>\n<p>\n	参数 	sql（必须）：要查询的SQL语句\n</p>\n<p>\n	parse（可选）：是否需要解析SQL\n</p>\n<p>\n	返回值\n</p>\n<p>\n	如果数据非法或者查询错误则返回false\n</p>\n<p>\n	否则返回查询结果数据集（同select方法）\n</p>\n<p>\n	使用示例：\n</p>\n<pre class="brush:php;">   $Model = new Model() // 实例化一个model对象 没有对应任何数据表\n\n   $Model-&gt;query("select * from think_user where status=1")</pre>\n<p>\n	如果你当前采用了分布式数据库，并且设置了读写分离的话，query方法始终是在读服务器执行，因此query方法对应的都是读操作，而不管你的SQL语句是什么。\n</p>\n<p>\n	2、execute方法\n</p>\n<p>\n	execute用于更新和写入数据的sql操作\n</p>\n<p>\n	用法 	execute($sql,$parse=false)\n</p>\n<p>\n	参数 	sql（必须）：要执行的SQL语句\n</p>\n<p>\n	parse（可选）：是否需要解析SQL\n</p>\n<p>\n	返回值 	如果数据非法或者查询错误则返回false\n</p>\n<p>\n	否则返回影响的记录数\n</p>\n<p>\n	使用示例：\n</p>\n<pre class="brush:php;">   $Model = new Model() // 实例化一个model对象 没有对应任何数据表\n\n   $Model-&gt;execute("update think_user set name=''thinkPHP'' where status=1");</pre>\n<p>\n	如果你当前采用了分布式数据库，并且设置了读写分离的话，execute方法始终是在写服务器执行，因此execute方法对应的都是写操作，而不管你的SQL语句是什么。\n</p>\n<p>\n	动态查询\n</p>\n<p>\n	借助PHP5语言的特性，ThinkPHP实现了动态查询，核心模型的动态查询方法包括下面几种：\n</p>\n<p>\n	方法名 	说明 	举例\n</p>\n<p>\n	getBy 	根据字段的值查询数据 	例如，getByName,getByEmail\n</p>\n<p>\n	getFieldBy 	根据字段查询并返回某个字段的值 	例如，getFieldByName\n</p>\n<p>\n	一、getBy动态查询\n</p>\n<p>\n	该查询方式针对数据表的字段进行查询。例如，User对象拥有id,name,email,address 等属性，那么我们就可以使用下面的查询方法来直接根据某个属性来查询符合条件的记录。\n</p>\n<pre class="brush:php;">   $user = $User-&gt;getByName(''liu21st'');\n\n   $user = $User-&gt;getByEmail(''liu21st@gmail.com'');\n\n   $user = $User-&gt;getByAddress(''中国深圳'');</pre>\n<p>\n	暂时不支持多数据字段的动态查询方法，请使用find方法和select方法进行查询。\n</p>\n<p>\n	二、getFieldBy动态查询\n</p>\n<p>\n	针对某个字段查询并返回某个字段的值，例如\n</p>\n<pre class="brush:php;">   $userId = $User-&gt;getFieldByName(''liu21st'',''id'');</pre>\n<p>\n	表示根据用户的name获取用户的id值。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	子查询\n</p>\n<p>\n	从3.0版本开始新增了子查询支持，有两种使用方式：\n</p>\n<p>\n	1、使用select方法\n</p>\n<p>\n	当select方法的参数为false的时候，表示不进行查询只是返回构建SQL，例如：\n</p>\n<p>\n	&nbsp; &nbsp;// 首先构造子查询SQL\n</p>\n<p>\n<pre class="brush:sql;">   $subQuery = $model-&gt;field(''id,name'')-&gt;table(''tablename'')-&gt;group(''field'')-&gt;where($where)\n   -&gt;order(''status'')-&gt;select(false);</pre>\n</p>\n<p>\n	当select方法传入false参数的时候，表示不执行当前查询，而只是生成查询SQL。\n</p>\n<p>\n	2、使用buildSql方法\n</p>\n<pre class="brush:php;">$subQuery =$model-&gt;field(''id,name'')-&gt;table(''tablename'')-&gt;group(''field'')-&gt;where($where)\n-&gt;order(''status'')-&gt;buildSql();</pre>\n<p>\n	调用buildSql方法后不会进行实际的查询操作，而只是生成该次查询的SQL语句（为了避免混淆，会在SQL两边加上括号），然后我们直接在后续的查询中直接调用。\n</p>\n<p>\n	&nbsp; &nbsp;// 利用子查询进行查询\n</p>\n<pre class="brush:php;">   $model-&gt;table($subQuery.'' a'')-&gt;where()-&gt;order()-&gt;select()</pre>\n<p>\n	构造的子查询SQL可用于ThinkPHP的连贯操作方法，例如table where等。\n</p>\n<p>\n	总结\n</p>\n<p>\n	本篇主要帮助我们了解如何进行数据的查询，包括简单查询、表达式查询、快捷查询、区间查询、统计查询，以及如何进行子查询操作。后面我们还会详细了解如何使用连贯操作进行更复杂的CURD操作。\n</p>', 2, 0, 'Thinkphp'),
(6, 31, 0, 'kindeditor4.x整合SyntaxHighlighter代码高亮', '', '', 8, '1357281425', '<p>\n	kindeditor4.x代码高亮功能默认使用的是prettify插件，prettify是Google提供的一款源代码语法高亮着色器，它提供一种\n简单的形式来着色HTML页面上的程序代码，不过因为SyntaxHighlighter的应用非常广泛，所以将kindeditor默认的\nprettify替换为SyntaxHighlighter代码高亮插件。\n</p>\n<p>\n	1.第一步首先修改kindeditor代码高亮写入pre标签时的class类名：\n</p>\n<p>\n	打开/kindeditor4/plugins/code/code.js，找到类似于这样一行：\n</p>\n<pre class="brush:js;">html = ''&lt;pre class="prettyprint'' + cls + ''"&gt;\\n'' + K.escape(code)''&lt;/pre&gt;'';</pre>\n改为以下的内容：\n<pre class="brush:js;">//html = ''&lt;pre class="prettyprint'' + cls + ''"&gt;\\n'' + K.escape(code) +''&lt;/pre&gt;'';\n//将代码高亮替换为SyntaxHighlighter插件需要的类名\nhtml = ''&lt;pre class="brush:'' + type + '';"&gt;\\n'' + K.escape(code) +''&lt;/pre&gt;'';\n//此处为将原有写法注释，上一行为修改后的内容。</pre>\n<p>\n	2.自定义页面中kindeditor中选择“插入代码”的图标，下拉菜单中的语言选择项：\n</p>\n<p>\n	同样是打开code.js文件，即可看到对应的选项，此处提供一份已经修改后的代码，供参考\n</p>\n<pre class="brush:js;">''&lt;select class="ke-code-type"&gt;'',\n	''&lt;option value="java"&gt;Java&lt;/option&gt;'',\n	''&lt;option value="php"&gt;PHP&lt;/option&gt;'',\n	''&lt;option value="html"&gt;HTML&lt;/option&gt;'',\n	''&lt;option value="css"&gt;CSS&lt;/option&gt;'',\n	''&lt;option value="js"&gt;JavaScript&lt;/option&gt;'',\n	''&lt;option value="xml"&gt;XML&lt;/option&gt;'',\n	''&lt;option value="shell"&gt;Shell&lt;/option&gt;'',\n	''&lt;option value="sql"&gt;SQL&lt;/option&gt;'',\n''&lt;/select&gt;'',</pre>\n此处要注意，选项中，value对应的值要和SyntaxHighlighter的brush aliases对应，SyntaxHighlighter官方支持的brush aliases表如下：\n<p>\n	<a href="http://alexgorbatchev.com/SyntaxHighlighter/manual/brushes/">http://alexgorbatchev.com/SyntaxHighlighter/manual/brushes/</a> \n</p>\n<p>\n	<br />\n</p>\n<p>\n	3.kindeditor部分已经改造完毕，下面要在页面中加入<span>SyntaxHighlighter</span>，以支持对代码的高亮解析。\n</p>\n<p>\n	第一步：下载<span>SyntaxHighlighter，目前官方的最新版本已经更新到3.0.83，官方下载地址为：<a href="http://alexgorbatchev.com/SyntaxHighlighter/download/download.php?sh_current" target="_blank">http://alexgorbatchev.com/SyntaxHighlighter/download/download.php?sh_current</a></span> \n</p>\n<p>\n	<br />\n</p>\n<p>\n	<span>第二步：下载完毕后解压，我们发现script目录中有很对js文件，支持不同语言的解析。复制我们需要解析的语言的js文件，到我们项目中所对应的目录中。同时复制下面三个js文件：</span> \n</p>\n<p>\n	<span>shAutoloader.js //支持语音的自动加载<br />\n</span> \n</p>\n<p>\n	shCore.js\n</p>\n<p>\n	(shBrushJava.js等，根据自己的需要复制)\n</p>\n<p>\n	<br />\n</p>\n<p>\n	第三步：复制css样式文件，到我们我们的项目中：\n</p>\n<p>\n	shCore.css\n</p>\n<p>\n	shThemeDefault.css(也可以根据自己需要的风格复制对应的样式文件)\n</p>\n<p>\n	<br />\n</p>\n<p>\n	第四步：在页面中引入以上文件：\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:html;">&lt;link type="text/css" href="syntax/shCore.css" media="screen" /&gt;\n&lt;link type="text/css" href="syntax/shThemeDefault.css" media="screen"/&gt;\n&lt;script type="text/javascript" src="syntax/shCore.js"&gt;&lt;/script&gt;\n&lt;script type="text/javascript" src="syntax/shAutoloader.js"&gt;&lt;/script&gt;</pre>\n<p>\n	<br />\n</p>\n<p>\n	第五步：打开SyntaxHighlighter自动加载功能，开启自动解析\n</p>\n<p>\n	默认其实可以在页面中分别引入单独的需要的解析js文件，但是如果我们的页面需要支持10多种语言，那就需要引入10多个js文件，那样对网页的加载速度\n有很大的影响，所以我们通过SyntaxHighlighter最新提供的autoloader自动加载功能，加载仅需要解析的js文件。\n</p>\n<p>\n	参考代码如下：\n</p>\n<pre class="brush:js;">&lt;script type="text/javascript"&gt;\nSyntaxHighlighter.autoloader(\n	''java            /syntax/shBrushJava.js'',\n	''php            /syntax/shBrushPhp.js'',\n	''html xml            /syntax/shBrushXml.js'',\n	''css            /syntax/shBrushCss.js'',\n	''js jscript javascript            /syntax/shBrushJScript.js'',\n	''bash shell            /syntax/shBrushBash.js'',\n	''sql            /syntax/shBrushSql.js''\n);\nSyntaxHighlighter.all();\n&lt;/script&gt;</pre>\n注意：\n<p>\n	<span style="color:#E56600;">SyntaxHighlighter.autoloader()应该在doc都载入完以后再执行。</span><br />\n<span style="color:#E56600;">如果引用了jQuery，可以放$(document).ready()里，这样的话放在header里也没问题。</span><br />\n<span style="color:#E56600;">但如果原生js，要不放body的onload里，要不放页面最后，比如在、随便找个地方放，就能看到效果了</span> \n</p>\n<p>\n	<br />\n</p>\n<p>\n	4.至此，我们的页面应该可以正常高亮显示代码了，不过当我们的代码多行是，在chrome浏览器下右边会显示滚动条，非常影响美观。\n</p>\n<p>\n	解决办法：\n</p>\n<p>\n	打开syntax-highlighter-compress中的样式文件shCoreDefault.css，找个空白处添加\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:css;">.syntaxhighlighter table {margin: 1px 0 !important;}</pre>\n<p>\n	改好之后，高亮代码右边栏滚动条就没有了，如果使用的其他风格，就修改其他风格对应的样式文件。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	<br />\n</p>', 2, 0, 'SyntaxHighlighter kindeditor'),
(7, 10, 0, 'PHP导出Excel', '', '', 9, '1357288630', '<p align="justify">\n	PHP导出Excel代码都很简单易懂,如果还要完成其他功能，那就要多看看类库里面的各种代码了。\n</p>\n<p align="justify">\n	PHPExcel官网 \nhttp://phpexcel.codeplex.com \n它的主站上还有很多其他很好的程序，有兴趣的朋友可以去看看\n</p>\n<p align="justify">\n	PHPExcel类库文件下载地址 \nhttp://phpexcel.codeplex.com/releases/view/45412#DownloadId=212184下载好后进入Classes文件夹，把里面的文件复制出来跟generateExcel.php放在同一个目录下就可以了.\n</p>\n<p align="justify">\n	<br />\n</p>\n<pre class="brush:php;">&lt;?php\n    error_reporting(E_ALL);\n	require_once("../../../WEB-ADMIN/inc/init.php");//加载数据库配置信息\n    require_once("../../../WEB-ADMIN/inc/adminfun.php");//加载函数库\n    require_once(''PHPExcel.php'');//调用PHPExcel\n    date_default_timezone_set(''PRC'');//设置时区\n    $voteinfo=$db -&gt; row_select("up_data", "", "", "*", "itemid");//读取数据库信息\n\n    \n    $objPHPExcel = new PHPExcel();\n    \n    //设置基本属性\n    $objPHPExcel-&gt;getProperties()-&gt;setCreator("lj")\n                                 -&gt;setLastModifiedBy("lj")\n                                 -&gt;setTitle("Office 2003 XLSX Test Document")\n                                 -&gt;setSubject("Office 2003 XLSX Test Document")\n    -&gt;setDescription("Test document for Office 2003 XLSX, generated using PHP classes.")\n                                 -&gt;setKeywords("office 2003 openxml php")\n                                 -&gt;setCategory("Test result file");\n    //设置工作薄索引\n    $objPHPExcel-&gt;setActiveSheetIndex(0);\n    \n    //设置工作薄名称\n    $objAtvSheet=$objPHPExcel-&gt;getActiveSheet();\n    $objAtvSheet-&gt;setTitle("生成报表1");\n    \n    //设置标题\n   // $objAtvSheet-&gt;setCellValue(''A1'',''PHP导出Excel'');\n    //$objAtvSheet-&gt;mergeCells(''A1:J1'');//合并单元格\n    \n   // $objAtvSheet-&gt;mergeCells(''A2:J2'');\n  \n    //设置单元格内容\n    $objAtvSheet-&gt;setCellValue(''A1'',''编号'');\n    $objAtvSheet-&gt;setCellValue(''B1'',''姓名'');\n    $objAtvSheet-&gt;setCellValue(''C1'',''得票'');\n    $objAtvSheet-&gt;setCellValue(''D1'',''性别'');\n    $objAtvSheet-&gt;setCellValue(''E1'',''年龄'');\n    $objAtvSheet-&gt;setCellValue(''F1'',''学校'');\n    $objAtvSheet-&gt;setCellValue(''G1'',''手机'');\n    $objAtvSheet-&gt;setCellValue(''H1'',''邮箱'');\n    $objAtvSheet-&gt;setCellValue(''I1'',''小图'');\n    $objAtvSheet-&gt;setCellValue(''J1'',''大图'');\n	$objAtvSheet-&gt;setCellValue(''K1'',''小图日期'');\n	$objAtvSheet-&gt;setCellValue(''L1'',''大图日期'');\n	$objAtvSheet-&gt;setCellValue(''M1'',''图片名称'');\n	$objAtvSheet-&gt;setCellValue(''N1'',''图片类型'');\n	$objAtvSheet-&gt;setCellValue(''O1'',''内容'');\n	$objAtvSheet-&gt;setCellValue(''P1'',''投票状态'');\n    \n    $count=count($voteinfo);\n    $RetentionRow=2;\n    //得到最后一行\n    $endLine=$RetentionRow+$count-1;\n    \n    //设置表头背景颜色\n    $header_Background=new PHPExcel_Style();\n    $header_Background-&gt;applyFromArray(\n        array(\n            ''fill''=&gt;array(\n                ''type''=&gt;PHPExcel_Style_Fill::FILL_SOLID,\n                ''color''=&gt;array(''argb''=&gt;''FF888888'')\n            ),\n            ''borders''=&gt;array(\n                ''right''=&gt;array(''style''=&gt;PHPExcel_Style_Border::BORDER_THIN),\n                ''bottom''=&gt;array(''style''=&gt;PHPExcel_Style_Border::BORDER_THIN),\n                ''top''=&gt;array(''style''=&gt;PHPExcel_Style_Border::BORDER_THIN),\n                ''left''=&gt;array(''style''=&gt;PHPExcel_Style_Border::BORDER_THIN)\n            )\n        )\n    );\n    $objAtvSheet-&gt;setSharedStyle($header_Background,"A1:P1");\n    \n    //设置内容的边框,注意：这里要先设置边框 在才能设置单元格里的字体颜色\n    $content_Border=new PHPExcel_Style();\n    $content_Border-&gt;applyFromArray(\n        array(\n            ''borders''=&gt;array(\n                ''left''=&gt;array(''style''=&gt;PHPExcel_Style_Border::BORDER_THIN),\n                ''top''=&gt;array(''style''=&gt;PHPExcel_Style_Border::BORDER_THIN),\n                ''right''=&gt;array(''style''=&gt;PHPExcel_Style_Border::BORDER_THIN),\n                ''bottom''=&gt;array(''style''=&gt;PHPExcel_Style_Border::BORDER_THIN)\n            )\n        )\n    );\n    $objAtvSheet-&gt;setSharedStyle($content_Border,"A2:P$endLine");//从第二行开始到结束\n    //开始填充数据到excel\n    for($i=0;$i&lt;$count;$i++)\n    {\n        $line=$i+$RetentionRow;//开始填充的行数\n        $s=mb_convert_encoding($arrayList[$i],"gb2312","UTF-8");\n        $objAtvSheet-&gt;setCellValue("A$line"," ".$voteinfo[$line-2][''sn'']);\n        $objAtvSheet-&gt;setCellValue("B$line",$voteinfo[$line-2][''name'']);\n        $objAtvSheet-&gt;setCellValue("C$line",$voteinfo[$line-2][''vote_count'']);\n        $objAtvSheet-&gt;setCellValue("D$line",$voteinfo[$line-2][''sex'']);\n        $objAtvSheet-&gt;setCellValue("E$line",$voteinfo[$line-2][''age'']);\n        $objAtvSheet-&gt;setCellValue("F$line",$voteinfo[$line-2][''school_name'']);\n        $objAtvSheet-&gt;setCellValue("G$line",$voteinfo[$line-2][''tel'']);\n        $objAtvSheet-&gt;setCellValue("H$line",$voteinfo[$line-2][''email'']);\n        $objAtvSheet-&gt;setCellValue("I$line",$voteinfo[$line-2][''picdir_thumb'']);\n	    $objAtvSheet-&gt;setCellValue("J$line",$voteinfo[$line-2][''picdir_src'']);\n        $objAtvSheet-&gt;setCellValue("K$line",$voteinfo[$line-2][''thumb_date'']);\n        $objAtvSheet-&gt;setCellValue("L$line",$voteinfo[$line-2][''src_date'']);\n        $objAtvSheet-&gt;setCellValue("M$line"," ".$voteinfo[$line-2][''picdir_bianhao'']);\n        $objAtvSheet-&gt;setCellValue("N$line",$voteinfo[$line-2][''picdir_type'']);\n        $objAtvSheet-&gt;setCellValue("O$line",$voteinfo[$line-2][''content'']);\n//        if($i % 2 ==0)\n//        {\n//            $objAtvSheet-&gt;getStyleByColumnAndRow(8,$line)-&gt;getFont()-&gt;setColor\n//            (new PHPExcel_Style_Color(PHPExcel_Style_Color::COLOR_DARKYELLOW));\n//        }\n        $objAtvSheet-&gt;setCellValue("P$line",$voteinfo[$line-2][''status'']);\n        \n        //设置超链接\n//        for($j=0;$j&lt;10;$j++)\n//        {\n//            $objAtvSheet-&gt;getCellByColumnAndRow($j,$line)-&gt;getHyperlink()-&gt;setUrl\n//            (''http://www.znb.cc'');\n//        }\n    }\n    \n    \n    \n    //设置 字体加粗，居中\n    $objAtvSheet-&gt;getStyle(''A1:P1'')-&gt;getFont()-&gt;setBold(true);\n    $objAtvSheet-&gt;getStyle(''A1:P1'')-&gt;getFont()-&gt;setSize(16);\n    $objAtvSheet-&gt;getStyle(''A1:P1'')-&gt;getAlignment()-&gt;setVertical(PHPExcel_Style_Alignment::\n	VERTICAL_CENTER);\n    $objAtvSheet-&gt;getStyle(''A1:P1'')-&gt;getAlignment()-&gt;setHorizontal(PHPExcel_Style_Alignment\n	::HORIZONTAL_CENTER);\n    $objAtvSheet-&gt;getStyle(''A1:P1'')-&gt;getFont()-&gt;setName(''新宋体'');\n    $objAtvSheet-&gt;getStyle(''A1:P1'')-&gt;getFont()-&gt;getColor()-&gt;setRGB(''000000'');\n    $objAtvSheet-&gt;getStyle(''A2'')-&gt;getAlignment()-&gt;setHorizontal(PHPExcel_Style_Alignment\n	::HORIZONTAL_CENTER);\n    \n    //设置内容 居中\n    $objAtvSheet-&gt;getStyle("A1:P$endLine")-&gt;getAlignment()-&gt;setHorizontal\n	(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);\n\n    //设置单元格宽度\n    $objAtvSheet-&gt;getColumnDimension(''A'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''B'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''C'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''D'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''E'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''F'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''G'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''H'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''I'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''J'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''K'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''L'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''M'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''N'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''O'')-&gt;setWidth(20);\n    $objAtvSheet-&gt;getColumnDimension(''P'')-&gt;setWidth(20);	\n    \n    \n    $dateString=date(''YmdHis'').".xls";\n    $outputFileName=$dateString;\n    header(''Content-Type: application/vnd.ms-excel'');\n    header(''Content-type: text/csv'');\n    header(''Content-Disposition: attachment;filename="''.$outputFileName.''"'');\n    header(''Cache-Control: max-age=0'');\n    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, ''Excel5'');\n    $objWriter-&gt;save(''php://output'');\n    \n?&gt;\n\n</pre>\n<p>\n	<br />\n</p>\n<p align="justify">\n	<br />\n</p>', 2, 0, 'PHP Excel'),
(8, 10, 0, 'PHP将Excel数据导入数据库的方法', '', '', 9, '1357290996', '<p>\n	PHP导入Excel，大体步骤就是先调用上传类，将excel文件上传，然后调用read.php读取刚刚上传excel的路径操作<a href="/Public/Upload/file/20130110/20130110130441_38574.rar" target="_blank">/Public/Upload/file/20130110/20130110130441_38574.rar</a> \n</p>\n<pre class="brush:php;">function comsUp(){\n      &nbsp;if($_FILES[''file''][''error'']=="0") {\n		/*获取文件扩展名*/\n		$fileinfo = pathinfo($_FILES[''file''][''name'']);\n		$extension = $fileinfo[''extension''];\n		if(!in_array($extension, array(''xls'', ''sql'', ''txt''))) echo"上传的文件格式不正确!";\n		\n		require("include/upload.class.php");\n		$upload = new upload($_FILES[''file'']);\n		if($upload -&gt; up()) {\n			$url =  $upload -&gt; fileURL;\n			$path =  $upload -&gt; saveTo;\n			$lastId =  $upload -&gt; lastId;\n			require_once CX_ROOT.''data/Excel/reader.php'';\n			$data = new Spreadsheet_Excel_Reader();\n			$data-&gt;setOutputEncoding(''UTF-8'');\n			if(WEB_URL != ''/''){\n				$url = str_replace(WEB_URL, '''', $url);\n			}else{\n				$url = substr($url, 1);\n			}\n			$data -&gt; read($url);\n			@unlink($path);\n			unset($data -&gt; sheets[0][''cells''][1]);\n			\n			foreach($data -&gt; sheets[0][''cells''] as $k =&gt; $v){\n				$inArr[''vote_cat''] = "1574";\n				$inArr[''sn''] = $v[1];\n				//$inArr[''type''] = ''vote'';\n				$inArr[''name''] = $v[2];\n				$inArr[''vote_count''] = $v[3] == '''' ? 0 : cxlib_numFilter($v[3]);\n				$inArr[''sex''] = $v[4];\n				$inArr[''age''] = $v[5] == '''' ? 0 : cxlib_numFilter($v[5]);\n				$inArr[''school_name''] = $v[6];\n				//$inArr[''picdir_ri''] = $v[7];\n				//$inArr[''picdir_pici''] = $v[8];\n				$inArr[''tel''] = $v[7];\n				$inArr[''email''] = $v[8];\n				$inArr[''picdir_thumb''] = $v[9];\n				$inArr[''picdir_src''] = $v[10];\n				//if($v[4] != '''') $inArr[''picture_url''] = $v[4];\n				$inArr[''thumb_date''] = $v[11] == '''' ? 0 : cxlib_numFilter($v[11]);\n				$inArr[''src_date''] = $v[12];\n				$inArr[''picdir_bianhao''] = $v[1];\n				//$inArr[''explain''] = $v[16];\n				$inArr[''picdir_type''] = $v[14];\n				$inArr[''content''] = $v[15];\n				$inArr[''etime''] = time();\n				$inArr[''status''] = $v[16] == '''' ? 0 : cxlib_numFilter($v[16]);\n			if($this -&gt; row_select_one("up_data", "sn = ''{$v[1]}''", "sn", "itemid")){\n					$this -&gt; row_update("up_data", $inArr, "sn = ''{$v[1]}''");\n				}else{\n					$this -&gt; row_insert("up_data", $inArr);\n				}\n				//print_r($inArr);\n			}\n			//print_r($this -&gt; G);\n			//print_r($data -&gt; sheets);\n			$this -&gt; row_delete("up_data", "sn = ''''");\n		}\n		echo"&lt;script type=''text/javascript''&gt;alert(''导入成功！'');history.back();&lt;/script&gt;";\n	}\n\n}</pre>\n<p>\n	<br />\n</p>\n<p>\n	<a href="/Public/Upload/file/20130104/20130104171518_53513.rar" target="_blank"> </a> \n</p>\n<p>\n	所需附件：<a href="/Public/Upload/file/20130110/20130110130452_88468.rar" target="_blank">/Public/Upload/file/20130110/20130110130452_88468.rar</a><span id="__kindeditor_bookmark_start_0__"></span>\n</p>\n<p>\n	<br />\n</p>', 2, 0, 'PHP Excel'),
(9, 10, 0, 'PHP清除，去除内容中html、css、js格式', '', '', 9, '1357356482', '<p>\n	strip_tags($str) 去掉 HTML 及 PHP 的标记\n</p>\n<p>\n	语法: string strip_tags(string str);\n</p>\n<p>\n	传回值: 字串\n</p>\n<p>\n	函式种类: 资料处理\n</p>\n<p>\n	内容说明 :\n</p>\n<p>\n	本函式可去掉字串中包含的任何 HTML 及 PHP 的标记字串。若是字串的 HTML 及 PHP 标签原来就有错，例如少了大于的符号，则也会传回错误。而本函式和 fgetss() 有着相同的功能\n</p>\n<p>\n	PHP去除html、css样式、js格式的方法很多，但上海SEO咨询顾问发现，它们基本都有一个弊端：空格往往清除不了\n</p>\n<p>\n	经过不断的研究，最终找到了一个理想的去除html包括空格css样式、js 的PHP函数。\n</p>\n<p>\n	PHP清除html、css、js格式并去除空格的PHP函数\n</p>\n<pre class="brush:php;">function cutstr_html($string, $sublen){\n	$string = strip_tags($string);\n    $string = preg_replace (''/\\n/is'', '''', $string);\n    $string = preg_replace (''/ |　/is'', '''', $string);\n    $string = preg_replace (''/&amp;nbsp;/is'', '''', $string);\n    preg_match_all("/[\\x01-\\x7f]|[\\xc2-\\xdf][\\x80-\\xbf]|\\xe0[\\xa0-\\xbf][\\x80-\\xbf]|[\\xe1-\\xef]\n[\\x80-\\xbf][\\x80-\\xbf]|\\xf0[\\x90-\\xbf][\\x80-\\xbf][\\x80-\\xbf]|[\\xf1-\\xf7][\\x80-\\xbf][\\x80-\\xbf]\n[\\x80-\\xbf]/", $string, $t_string);\n    if(count($t_string[0]) - 0 &gt; $sublen)\n	$string = join('''', array_slice($t_string[0], 0, $sublen))."…";   \n    else $string = join('''', array_slice($t_string[0], 0, $sublen));\n    return $string;\n}</pre>\n<p>\n	<br />\n</p>\n<p>\n	这个函数既有去除html标签、css样式、js、空格等格式的功能(格式化html文本)也有截取字符串的功能。\n</p>\n<p>\n	htmlspecialchars 将特殊字元转成 HTML 格式\n</p>\n<p>\n	语法: string htmlspecialchars(string string);\n</p>\n<p>\n	传回值: 字串\n</p>\n<p>\n	函式种类: 资料处理\n</p>\n<p>\n	内容说明\n</p>\n<p>\n	本函式将特殊字元转成 HTML 的字串格式 ( &amp;....; )。最常用到的场合可能就是处理客户留言的留言版了。\n</p>\n<p>\n	&amp; (和) 转成 &amp;amp;\n</p>\n<p>\n	" (双引号) 转成 &amp;quot;\n</p>\n<p>\n	&lt; (小于) 转成 &amp;lt;\n</p>\n<p>\n	&gt; (大于) 转成 &amp;gt;\n</p>\n<p>\n	此函式只转换上面的特殊字元，并不会全部转换成 HTML 所定的 ASCII 转换。\n</p>\n<p>\n	使用范例\n</p>\n<pre class="brush:php;">&lt;FORM ACTION=''./../b''la&gt;\n\n&lt;H2&gt;Restaurant Description&lt;H2&gt;\n\nName of restaurant:\n\n&lt;INPUT TYPE=text NAME="restname" VALUE="&lt;?echo HTMLSpecialChars($restname); ?&gt;"&gt; \n\n&lt;!-- 变数 $restname 是酱子的 $restname="\\"The White Horse\\""; --&gt;\n\n&lt;BR&gt;\n\n输入描述 (若您会 HTML，可直接使用): &lt;BR&gt;\n\n&lt;TEXTAREA NAME="descript"&gt;&lt;?echo HTMLSpecialChars($descript);?&gt;&lt;/TEXTAREA&gt; \n\n&lt;INPUT TYPE=submit&gt;\n\n&lt;/FORM&gt; </pre>\n<p>\n	htmlentities 将所有的字元都转成 HTML 字串\n</p>\n<p>\n	语法: string htmlentities(string string);\n</p>\n<p>\n	传回值: 字串\n</p>\n<p>\n	函式种类: 资料处理\n</p>\n<p>\n	内容说明\n</p>\n<p>\n	本函式有点像 htmlspecialchars() 函式，但本函式会将所有 string 的字元都转成 HTML 的特殊字集字串。不过在转换后阅读网页原始码的方面，会有很多困扰，尤其是网页原始码的中文字会变得不知所云，浏览器上看到的还是正常的。\n</p>\n<p>\n	php 去除html标签 js 和 css样式\n</p>\n<pre class="brush:php;">function ClearHtml($content){  \n   $content = preg_replace("/&lt;a[^&gt;]*&gt;/i", "", $content);  \n   $content = preg_replace("/&lt;\\/a&gt;/i", "", $content);   \n   $content = preg_replace("/&lt;div[^&gt;]*&gt;/i", "", $content);  \n   $content = preg_replace("/&lt;\\/div&gt;/i", "", $content);      \n   $content = preg_replace("/&lt;!--[^&gt;]*--&gt;/i", "", $content);//注释内容  \n   $content = preg_replace("/style=.+?[''|\\"]/i",'''',$content);//去除样式  \n   $content = preg_replace("/class=.+?[''|\\"]/i",'''',$content);//去除样式  \n   $content = preg_replace("/id=.+?[''|\\"]/i",'''',$content);//去除样式     \n   $content = preg_replace("/lang=.+?[''|\\"]/i",'''',$content);//去除样式      \n   $content = preg_replace("/width=.+?[''|\\"]/i",'''',$content);//去除样式   \n   $content = preg_replace("/height=.+?[''|\\"]/i",'''',$content);//去除样式   \n   $content = preg_replace("/border=.+?[''|\\"]/i",'''',$content);//去除样式   \n   $content = preg_replace("/face=.+?[''|\\"]/i",'''',$content);//去除样式   \n   $content = preg_replace("/face=.+?[''|\\"]/",'''',$content);//去除样式只允许小写正则匹配没有带i参数\n   return $content;\n}</pre>\n<p>\n	<br />\n</p>\n<p>\n	<br />\n</p>', 2, 0, 'PHP');
INSERT INTO `yulin_archive` (`id`, `sortid`, `paixu`, `title`, `style`, `author`, `clicks`, `creattime`, `content`, `status`, `attribute`, `tags`) VALUES
(10, 10, 0, 'PHP利用Jcrop实现头像裁剪', '', '', 14, '1357455709', '<p>\n	首先介绍一下Jcrop\n</p>\n<p>\n	Jcrop是一个jQuery插件，它能为你的WEB应用程序快速简单地提供图片裁剪的功能。\n</p>\n<p>\n	<strong>特点：</strong> \n</p>\n<ul>\n	<li>\n		对所有图片均unobtrusively（无侵入的，保持DOM简洁）\n	</li>\n	<li>\n		支持宽高比例锁定\n	</li>\n	<li>\n		<span>支持 minSize / maxSize设置</span> \n	</li>\n	<li>\n		<span>支持改变选区或移 动选区时的回调（Callback）</span> \n	</li>\n	<li>\n		<span>支持用键盘微调选 区</span> \n	</li>\n	<li>\n		<span>通过API创建互 动，比如动画效果</span> \n	</li>\n	<li>\n		<span>支持CSS样式</span> \n	</li>\n</ul>\n<p>\n	下面的几段代码是上次工作时候写的，比较乱：\n</p>\n<p>\n	这是html\n</p>\n<p>\n	<br />\n</p>\n<pre class="brush:html;">{include file="header.html"}\n{literal}\n&lt;script type="text/javascript"&gt;\n function lookup(){\n	 ajaxPost("regForm9", rootDir + "index.php?CM=ajax&amp;A=searchschool", lookup_callback);\n }\n function lookup_callback(data){\n				if(data.length &gt;0) {\n					$(''#suggestions'').show();\n					$(''#autoSuggestionsList'').html(data);\n				}\n }\n 	function fill(thisValue) {\n		$(''#inputString'').val(thisValue);\n		\n		setTimeout("$(''#suggestions'').hide();", 200);\n	}\n	 	function hidden() {\n		\n		\n		setTimeout("$(''#suggestions'').hide();", 200);\n	}\n&lt;/script&gt;\n{/literal}\n  &lt;script src="{$URL_DATA_JS}jquery.min.js" type="text/javascript"&gt;&lt;/script&gt;\n  &lt;script src="{$URL_DATA_JS}jquery.Jcrop.js" type="text/javascript"&gt;&lt;/script&gt;\n  &lt;link rel="stylesheet" href="{$URL_DATA_JS}jquery.Jcrop.css" type="text/css" /&gt;\n{literal}\n&lt;style&gt;\n.center{height:auto !important;height:700px; min-height:700px;}\n&lt;/style&gt;\n{/literal}\n&lt;tr&gt;\n&lt;td&gt;\n&lt;table width="1000" border="0" cellspacing="0" cellpadding="0" align="center"&gt;\n  &lt;tr&gt;\n&lt;td valign="top"&gt;\n&lt;table width="945" border="0" cellspacing="0" cellpadding="0" align="center"&gt;\n  &lt;tr&gt;\n        &lt;td valign="top"&gt;&lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&gt;\n          \n            &lt;tr&gt;\n\n              &lt;td&gt;&lt;img src="{$URL_TEM}/images/menu7.jpg" width="684" height="36" /&gt;&lt;/td&gt;\n\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td height="10"&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            \n			&lt;tr&gt;&lt;td colspan="4" height="5"&gt;&lt;/td&gt;&lt;/tr&gt;\n\n            &lt;tr&gt;\n              &lt;td&gt;\n              \n              &lt;div class="center"&gt;\n              \n              \n                {literal}\n	&lt;script type="text/javascript"&gt;\n\n    jQuery(function($){\n\n      // Create variables (in this scope) to hold the API and image size\n      var jcrop_api, boundx, boundy;\n      \n      $(''#target'').Jcrop({\n		minSize: [55,50],\n		setSelect: [ 75, 60, 466, 413 ],\n        onChange: updatePreview,\n        onSelect: updatePreview,\n		onSelect: updateCoords,\n        aspectRatio: 1.10625\n      },\n	function(){\n        // Use the API to get the real image size\n        var bounds = this.getBounds();\n        boundx = bounds[0];\n        boundy = bounds[1];\n        // Store the API in the jcrop_api variable\n        jcrop_api = this;\n    });\n	function updateCoords(c)\n	{\n		$(''#x'').val(c.x);\n		$(''#y'').val(c.y);\n		$(''#w'').val(c.w);\n		$(''#h'').val(c.h);\n	};\n	function checkCoords()\n	{\n		if (parseInt($(''#w'').val())) return true;\n		alert(''Please select a crop region then press submit.'');\n		return false;\n	};\n      function updatePreview(c){\n        if (parseInt(c.w) &gt; 0)\n        {\n          var rx = 48 / c.w;		//小头像预览Div的大小\n          var ry = 48 / c.h;\n\n          $(''#preview'').css({\n            width: Math.round(rx * boundx) + ''px'',\n            height: Math.round(ry * boundy) + ''px'',\n            marginLeft: ''-'' + Math.round(rx * c.x) + ''px'',\n            marginTop: ''-'' + Math.round(ry * c.y) + ''px''\n          });\n        }\n	    {\n          var rx = 131 / c.w;		//大头像预览Div的大小\n          var ry = 113 / c.h;\n          $(''#preview2'').css({\n            width: Math.round(rx * boundx) + ''px'',\n            height: Math.round(ry * boundy) + ''px'',\n            marginLeft: ''-'' + Math.round(rx * c.x) + ''px'',\n            marginTop: ''-'' + Math.round(ry * c.y) + ''px''\n          });\n        }\n      };\n    });\n\n  &lt;/script&gt;\n{/literal}\n\n&lt;div style="float:left; width:543px;"&gt;&lt;img id="target" src="uploads/{$userinfo.picdir_src}/\n{$userinfo.src_date}/{$userinfo.picdir_bianhao}.{$userinfo.picdir_type}"  &gt;&lt;/div&gt;\n&lt;!--&lt;div style="width:48px;height:48px;margin:10px;overflow:hidden; float:left;"&gt;\n&lt;img  style="float:left;" id="preview" src="{$URL_TEM}/images/0000.jpg" &gt;&lt;/div&gt;--&gt;\n&lt;div style="width:131px;height:113px;overflow:hidden; float:right;"&gt;\n&lt;img  style="float:left;" id="preview2" src="uploads/{$userinfo.picdir_src}/\n{$userinfo.src_date}/{$userinfo.picdir_bianhao}.{$userinfo.picdir_type}" &gt;&lt;/div&gt;\n&lt;div style="clear:both"&gt;&lt;/div&gt;\n&lt;div style="width:684px;"&gt;\n &lt;form name="regForm9" id="regForm9" onsubmit="return false;"&gt;\n	&lt;input type="hidden" id="bianhao" name="bianhao" value="{$userinfo.picdir_bianhao}" /&gt;\n        &lt;input type="hidden" id="type" name="type" value="{$userinfo.picdir_type}" /&gt;\n        &lt;input type="hidden" id="itemid" name="itemid" value="{$userinfo.itemid}" /&gt;\n         &lt;input type="hidden" id="src_date" name="src_date" value="{$userinfo.src_date}" /&gt;\n        &lt;input type="hidden" id="x" name="x" /&gt;\n		&lt;input type="hidden" id="y" name="y" /&gt;\n		&lt;input type="hidden" id="w" name="w" /&gt;\n		&lt;input type="hidden" id="h" name="h" /&gt; \n  &lt;table border="0" cellspacing="0" height="350"&gt;\n  &lt;tr&gt;\n    &lt;td&gt;幼儿园：&lt;/td&gt;\n    &lt;td colspan="2"&gt;\n\n    &lt;input type="text" name="school_name" id="inputString" onkeyup="lookup(this.value);" \nonblur="hidden();" value="{$userinfo.school_name}" {if $userinfo.school_name !=null } \ndisabled="disabled" {/if}/&gt;\n &lt;select id="school_area" name="school_area" size="1" style=" width:100px;   font-family: \n微软雅黑,黑体; "&gt;  \n  &lt;option value="" &gt;选择区域&lt;/option&gt;\n  {foreach item=school_area from=$school_areas}\n  &lt;option value="{$school_area.school_area}"\n&nbsp;{if $userinfo.school_area eq $school_area.school_area } selected="selected"{/if} &gt;\n{$school_area.school_area}&lt;/option&gt;\n  {/foreach}\n    &lt;/select&gt;\n      &lt;div class="suggestionsBox" id="suggestions" style=" width:149px;; ;display: none;\n&nbsp;z-index:666; float:right; position:absolute"&gt;\n		&lt;div class="suggestionList" id="autoSuggestionsList" style="width:143px; \n background:#CCC; padding:5px; border:1px solid #333"&gt;		&lt;/div&gt;\n      &lt;/div&gt; \n    &lt;/td&gt;\n  &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td&gt;班级：&lt;/td&gt;\n    &lt;td colspan="2"&gt;&lt;input type="text" name="classgrade" value="{$userinfo.classgrade}" \n{if $userinfo.classgrade !=null } disabled="disabled" {/if}/&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;姓名：&lt;/td&gt;\n    &lt;td colspan="2"&gt;&lt;input type="text" name="name" value="{$userinfo.name}" \n{if $userinfo.name !=null } disabled="disabled" {/if}/&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;性别：&lt;/td&gt;\n    &lt;td colspan="2"&gt;&lt;select name="sex"  &gt;\n     &lt;option value=""&gt;性别&lt;/option&gt;\n     &lt;option value="男" {if $userinfo.sex == ''男'' } selected="selected" {/if}&gt;男&lt;/option&gt;\n     &lt;option value="女" {if $userinfo.sex == ''女''} selected="selected" {/if}&gt;女&lt;/option&gt;\n     &lt;/select&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;年龄：&lt;/td&gt;\n    &lt;td colspan="2"&gt;&lt;select name="age"  &gt;\n     &lt;option value=""&gt;年龄&lt;/option&gt;\n    &lt;option value="3" {if $userinfo.age eq 3} selected="selected" {/if}&gt;3&lt;/option&gt;\n    &lt;option value="4" {if $userinfo.age eq 4} selected="selected" {/if}&gt;4&lt;/option&gt;\n    &lt;option value="5" {if $userinfo.age eq 5} selected="selected" {/if}&gt;5&lt;/option&gt;\n    &lt;option value="6" {if $userinfo.age eq 6} selected="selected" {/if}&gt;6&lt;/option&gt;\n    &lt;option value="7" {if $userinfo.age eq 7} selected="selected" {/if}&gt;7&lt;/option&gt;   \n    &lt;/select&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td&gt;介绍：&lt;/td&gt;\n    &lt;td colspan="2"&gt;&lt;textarea name="content" cols="" rows="" style="width:260px; height:80px;"&gt;\n{$userinfo.content}&lt;/textarea&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td colspan="2"&gt;是否在使用平板电脑作为学习工具：&lt;/td&gt;\n    &lt;td&gt;&lt;select name="istable"  &gt;\n     &lt;option value=""&gt;请选择&lt;/option&gt;\n     &lt;option value="1" &gt;是&lt;/option&gt;\n     &lt;option value="0" &gt;否&lt;/option&gt;\n     &lt;/select&gt;&lt;!--&lt;input name="istable" type="radio" value="1" /&gt;是&lt;input name="istable" \ntype="radio" value="0" /&gt;否--&gt;&lt;/td&gt;\n \n  &lt;/tr&gt;\n\n  &lt;tr&gt;\n    &lt;td&gt;&lt;input type="submit" value="不满意，换一张" onclick="updatepic();"/&gt;&lt;/td&gt;\n    &lt;td&gt;&lt;input type="submit" value="裁剪头像并保存信息" onclick="Clip();"/&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n              &lt;/div&gt;\n              \n              \n              &lt;/td&gt;\n            &lt;/tr&gt;\n{include file="footer.html"}\n          &lt;/table&gt;&lt;/td&gt;\n    {include file="right.html"}\n  &lt;/tr&gt;\n&lt;/table&gt;\n\n&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n\n&lt;/table&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n</pre>\n<p>\n	onclick="Clip();"这个函数的效果就是执行了以下php代码\n</p>\n<pre class="brush:php;">function Clip(){\n	if(!$this-&gt;U) \n{echo "&lt;script&gt;alert(\\"请先登录\\");self.location=''index.php'';&lt;/script&gt;";exit();}\n	require_once("image.class.php");\n	if($_POST[''w'']&lt;50) \ndie("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n请尝试缩放拖动图片上的选取框！&lt;/div&gt;");\n	if(empty($_POST[''school_area''])) \ndie("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n请选择幼儿园区域！&lt;/div&gt;");\n	if(empty($_POST[''school_name''])) \ndie("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n幼儿园不能为空！&lt;/div&gt;");\n	if(empty($_POST[''classgrade''])) \ndie("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n班级不能为空！&lt;/div&gt;");\n	if(empty($_POST[''name''])) \ndie("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n姓名不能为空！&lt;/div&gt;");\n	if ($_POST[''name''] &amp;&amp; !preg_match("/^[\\x80-\\xff]/", $_POST[''name'']))\n{ die("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n请正确填写真实姓名!&lt;/div&gt;");\n	}\n	if (!check::CheckLengthBetween($_POST[''name''], 6, 12)){\n	die("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n请正确填写真实姓名!&lt;/div&gt;");\n	}\n	if(empty($_POST[''sex''])) \ndie("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n请选择性别！&lt;/div&gt;");\n	if(empty($_POST[''age''])) \ndie("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n请选择年龄！&lt;/div&gt;");\n	//if(empty($_POST[''age''])) \ndie("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n请选择年龄！&lt;/div&gt;");\n	if($_POST[''istable'']==null) \ndie("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n是否在使用平板电脑作为学习工具！&lt;/div&gt;");\n	//if(empty($_POST[''tel''])) \ndie("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n请填写手机号！&lt;/div&gt;");\n	//if(!preg_match("/^0{0,1}(13[0-9]|15[0-9])[0-9]{8}$/", $_POST[''tel''])) \ndie("&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n手机号码格式错误！&lt;/div&gt;");\n	$images = new Images("file");\n	//echo $_POST[''src_date''];\n	$image = ''uploads/src/''.$_POST[''src_date''].''/''.$_POST[''bianhao''].''.''.$_POST[''type''];\n	//$image=$_POST[''bianhao''].''.''.$_POST[''type''];\n	//echo $image;\n	$res = $images-&gt;thumb($image,false,1);//主要实现裁剪的代码是这个函数\n	//print_r($res);\n	if($res == false){\n	echo "&lt;div style=\\"width:300px; text-align:center; height:50px; line-height:50px; \\"&gt;\n裁剪失败&lt;/div&gt;";\n	}elseif(is_array($res)){\n		//print_r($res);\n		$inArr[''school_name'']=$_POST[''school_name''];\n		$inArr[''school_area'']=$_POST[''school_area''];\n		$inArr[''classgrade'']=$_POST[''classgrade''];\n		$inArr[''name'']=$_POST[''name''];\n		$inArr[''age'']=$_POST[''age''];\n		$inArr[''sex'']=$_POST[''sex''];\n		$inArr[''content'']=$_POST[''content''];\n		$inArr[''istable'']=$_POST[''istable''];\n		//$inArr[''tel'']=$_POST[''tel''];\n		$inArr[''status'']=''0'';\n		//$inArr[''email'']=$_POST[''email''];\n		$inArr[''thumb_date'']=date("Ymd");\n		$inArr[''picdir_thumb'']="thumb";\n//		$school=$this-&gt;\n                row_select_one("schoolname","school_name=''{$_POST[''school_name'']}''","*","id");\n//			if(!$school){\n//				$inArr1[''school_name'']=$_POST[''school_name''];\n//				$this-&gt;row_insert("schoolname",$inArr1);\n//			}\n		$this -&gt; row_update("up_data", $inArr, "itemid= ''{$_POST[''itemid'']}''");\n		echo "_Y_";\n	}elseif(is_string($res)){\n		echo ''&lt;img src="''.$res.''"&gt;'';\n	}\n}\n</pre>\n<pre class="brush:php;">$res = $images-&gt;thumb($image,false,1);//主要实现裁剪的代码是这个函数</pre>\n<p>\n	最终效果如图：\n</p>\n<p>\n	<img src="/Public/Upload/image/20130110/20130110130713_64259.png" alt="" />\n</p>\n<p>\n	简单完整的例子：<a href="/Public/Upload/file/20130110/20130110130635_84088.rar" target="_blank">/Public/Upload/file/20130110/20130110130635_84088.rar</a> \n</p>', 2, 0, 'Jcrop 头像裁剪'),
(11, 31, 0, 'Js实现简繁体切换', '', '', 13, '1357462601', '一个非常好用繁简体转换js<br />\n调用方法：<br />\n<pre class="brush:html;">&lt;script type="text/javascript" src="path/to/StoT.js"&gt;&lt;/script&gt;\n&lt;a id="ST_translate" onclick="do_simple_to_traditional();"&gt;繁體中文&lt;/a&gt;</pre>\n所需附件：<a href="/Public/Upload/file/20130110/20130110130529_78206.rar" target="_blank">/Public/Upload/file/20130110/20130110130529_78206.rar</a>', 2, 0, 'Javascript'),
(12, 10, 0, 'PHP常用的字符串处理函数', '', '', 9, '1357610481', '<h4>\n	1查找字符位置函数：\n</h4>\n<p>\n	int strpos(string $str, mixed search,[int]):查找search在$str中的第一次出现的位置(从int开始,忽略int之前的任何值)；\n</p>\n<p>\n	int stripos(string $str,string search,[int]):函数返回字符串在另一个字符串中第一次出现的位置。该函数对大小写不敏感\n</p>\n<p>\n	strrpos($str,search,[int]):查找search在$str中的最后一次出现的位置从int(从int开始,忽略int之前的任何值)；\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	2、提取子字符函数（双字节）\n</h4>\n<p>\n	submit($str,int start[,int length]):从$str中strat位置开始提取[length长度的字符串]。\n</p>\n<p>\n	strstr($str1,$str2):从$str1(第一个的位置)搜索$str2并从它开始截取到结束字符串;若没有则返回FALSE。\n</p>\n<p>\n	stristr() 功能同strstr，只是不区分大小写。\n</p>\n<p>\n	strrchr() 从最后一次搜索到的字符处返回；用处：取路径中文件名\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	3、替换字符串的PHP字符串函数\n</h4>\n<p>\n	str_replace(search,replace,$str):从$str中查找search用replace来替换\n</p>\n<p>\n	str_irreplace(search,replace,$str):\n</p>\n<p>\n	strtr($str,search,replace):这个函数中replace不能为"";\n</p>\n<p>\n	substr_replace($Str,$rep,$start[,length])$str原始字符串,$rep替换后的新\n</p>\n<p>\n	字符串,$start起始位置,$length替换的长度，该项可选\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	4、字符长度\n</h4>\n<p>\n	int strlen($str)\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	5、比较字符函数\n</h4>\n<p>\n	int strcmp($str1,$str2):$str1&gt;=&lt;$str2分别为正1,0,-1（字符串比较）\n</p>\n<p>\n	strcasecmp() 同上（不分大小写）\n</p>\n<p>\n	strnatcmp("4","14") 按自然排序比较字符串\n</p>\n<p>\n	strnatcasecmp() 同上，（区分大小写）\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	6、分割成数组的PHP字符串函数\n</h4>\n<p>\n	str_split($str,len):把$str按len长度进行分割返回数组\n</p>\n<p>\n	split(search,$str[,int]):把$str按search字符进行分割返回数组int是分割几次，后面的将不分割\n</p>\n<p>\n	expload(search,$str[,int])\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	7、去除空格：\n</h4>\n<p>\n	ltrim、rtrim、trim\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	8、加空格函数\n</h4>\n<p>\n	chunk_split($str,2);向$str字符里面按2个字符就加入一个空格；\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	9、chr、ord--返回指定的字符或ascii\n</h4>\n<p>\n	<br />\n</p>\n<h4>\n	10、HTML代码有关函数\n</h4>\n<p>\n	nl2br()：使\\n转换为&lt;br&gt;。\n</p>\n<p>\n	strip_tags($str[,''&lt;p&gt;''])：去除HTML和PHP标记\n</p>\n<p>\n	在$str中所有HTML和PHP代码将被去除，可选参数为html和PHP代码作用是将保留\n</p>\n<p>\n	可选参数所写的代码。\n</p>\n<p>\n	如：echo strip_tags($text, ''&lt;br&gt;&lt;p&gt;'');\n</p>\n<p>\n	htmlspecialchars($str[,参数]):页面正常输出HTML代码参数是转换方式\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	11、字符大小写转换的PHP字符串函数\n</h4>\n<p>\n	strtolower($str) 字符串转换为小写\n</p>\n<p>\n	strtoupper($str) 字符串转换为大写\n</p>\n<p>\n	ucfirst($str) 将函数的第一个字符转换为大写\n</p>\n<p>\n	ucwords($str) 将每个单词的首字母转换为大写\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	12、数据库相关的PHP字符串函数\n</h4>\n<p>\n	addslashes($str)：使str内单引号（''）、双引号（"）、反斜线（\\）与 NUL\n</p>\n<p>\n	字符串转换为\\'',\\",\\\\。\n</p>\n<p>\n	magic_quotes_gpc = On 自动对 get post cookie的内容进行转义\n</p>\n<p>\n	get_magic_quotes_gpc（）检测是否打开magic_quotes_gpc\n</p>\n<p>\n	stripslashes() 去除字符串中的反斜杠\n</p>\n<p>\n	<br />\n</p>\n<p>\n	<br />\n</p>', 2, 0, 'PHP'),
(13, 10, 0, 'PHP修改上传最大限制的注意事项', '', '', 20, '1357621659', '<p>\n	今天在做批量上传图片的时候出现一个问题，一次性上传8张图片后，总是不成功，单独上传1,2张图片可以成功，然后找原因原来发现php.ini中upload_max_filesize为4M,而我上传的图片每张有1M,我想可能就是upload_max_filesize的问题，后来我就修改成了50M,以为就可以了，但是上传还是不成功，然后我就打开firebug查看post请求，发现了一段文字，firebug达到了post请求大小限制，后来才知道原来还有一个参数要设置下，那就是<span class="b"><span class="c">post_max_size</span></span><span id="__kindeditor_bookmark_start_9__">，我也修改成50M后，只要上传的图片总量不超过50M都能成功.</span>\n</p>\n<p>\n	<span id="__kindeditor_bookmark_start_9__">如果说没有权限修改php.ini怎么办，有人说用ini_set()函数,但是upload_max_filesize，<span class="b"><span class="c">post_max_size</span></span><span id="__kindeditor_bookmark_start_9__"></span>，是不可以用这个函数在脚本中直接设置的，详见http://www.oscphp.com/Archive/14.html<br />\n</span>\n</p>\n<p>\n	<br />\n<span id="__kindeditor_bookmark_start_9__"></span>\n</p>\n<p>\n	<span id="__kindeditor_bookmark_start_9__">下面总结了一下上传大文件往往需要修改的地方：</span> \n</p>\n<p>\n	<br />\n<span id="__kindeditor_bookmark_start_9__">打开php.ini，首先找到<br />\n;;;;;;;;;;;;;;;;<br />\n; File Uploads ;<br />\n;;;;;;;;;;;;;;;;<br />\n区域，有影响文件上传的以下几个参数：<br />\nfile_uploads&nbsp;&nbsp; =&nbsp;&nbsp; on&nbsp;&nbsp; ;是否允许通过HTTP上传文件的开关。默认为ON即是开<br />\nupload_tmp_dir&nbsp;&nbsp; ;文件上传至服务器上存储临时文件的地方，如果没指定就会用系统默认的临时文件夹<br />\nupload_max_filesize&nbsp;&nbsp; =&nbsp;&nbsp; 8m&nbsp;&nbsp; ;望文生意，即允许上传文件大小的最大值。默认为2M<br />\n</span> \n</p>\n<p>\n	<span id="__kindeditor_bookmark_start_9__">在<br />\n;;;;;;;;;;;;;;;;;<br />\n; Data Handling ;<br />\n;;;;;;;;;;;;;;;;;<br />\n区域，还有一项：<br />\npost_max_size&nbsp;&nbsp; =&nbsp;&nbsp; 8m ;指通过表单POST给PHP的所能接收的最大值，包括表单里的所有值。默认为8M<br />\n一般地，设置好上述四个参数后，上传&lt;=8M的文件是不成问题，在网络正常的情况下。<br />\n但如果要上传&gt;8M的大体积文件，只设置上述四项还一定能行的通。除非你的网络真有100M/S的上传高速，否则你还得关心关心下面的参数：</span> \n</p>\n<p>\n	<span id="__kindeditor_bookmark_start_9__">;;;;;;;;;;;;;;;;;;;<br />\n; Resource Limits ;<br />\n;;;;;;;;;;;;;;;;;;;<br />\nmax_execution_time&nbsp;&nbsp; =&nbsp;&nbsp; 600 ;每个PHP页面运行的最大时间值(秒)，默认30秒<br />\nmax_input_time = 600 ;每个PHP页面接收数据所需的最大时间，默认60秒<br />\nmemory_limit&nbsp;&nbsp; =&nbsp;&nbsp; 8m&nbsp;&nbsp; ;每个PHP页面所吃掉的最大内存，默认8M</span> \n</p>\n<span id="__kindeditor_bookmark_start_9__"></span>', 2, 0, 'PHP'),
(14, 10, 0, 'PHP ini_set()函数的介绍', '', '', 25, '1357623919', '<p>\n	<span style="font-size:small;"><span>ini_set()</span>具有更改<span>php.ini</span>设置的功能。此函数接收两个参数：需要调整的配置变量名，以及变量的新值。</span> \n</p>\n<p>\n	<span style="font-size:small;"> </span> \n</p>\n<pre class="brush:php;">    &lt;?php  \n    ini_set(''max_execution_time'',''10'');  \n    ini_set(''memory_limit'',''1024M'');  \n    echo ''max_execution_time = '' . ini_get(''max_execution_time'') ;  \n    echo ''memory_limit = '' . ini_get(''memory_limit'') ;  \n    echo ''upload_max_filesize = '' . return_bytes(ini_get(''upload_max_filesize''));  \n    echo ''post_max_size = '' . ini_get(''post_max_size'') . "/n";  \n    echo ''post_max_size+1 = '' . (ini_get(''post_max_size'')+1) . "/n";  \n    echo ''post_max_size in bytes = '' . return_bytes(ini_get(''post_max_size''));  \n      \n    function return_bytes($val) {  \n        $val = trim($val);  \n        $last = strtolower($val{strlen($val)-1});  \n        switch($last) {  \n            // The ''G'' modifier is available since PHP 5.1.0  \n            case ''g'':  \n                $val *= 1024;  \n            case ''m'':  \n                $val *= 1024;  \n            case ''k'':  \n                $val *= 1024;  \n        }  \n      \n        return $val;  \n    }  \n    ?&gt;;  \n    //最后三行输出如下：  \n    post_max_size = 8M  \n    post_max_size+1 = 9  \n    post_max_size in bytes = 8388608   </pre>\n<p>\n	<span style="font-size:small;"><span style="font-size:x-small;"></span></span> \n</p>\n<span style="font-size:small;"></span> \n<p>\n	这样的设置将仅仅影响被设置的脚本。一旦脚本执行完毕，该变量将自动恢复到原始值。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	注意：\n</p>\n<p>\n	1.php.ini 文件中，并不是所有的设置项都是以integer型存储的，比如upload_max_filesize项就是以简写形式（ shorthand notation）存储的，因此直接用ini_get()并不能获得正确的值，可以调用上例中return_bytes()函数进行转换。\n</p>\n<p>\n	2.并不是所有的available options都可以通过ini_set()函数来修改。具体哪些可以通过ini_set()函数来修改,参见\n</p>\n<span style="font-size:small;"><span style="font-size:x-small;"><span style="font-size:10.5pt;font-family:宋体;"><span style="font-size:small;"></span><a href="http://php.chinaunix.net/manual/zh/ini.list.php" target="_blank"><span style="font-size:small;color:#337FE5;">http://php.chinaunix.net/manual/zh/ini.list.php</span></a></span></span></span> \n<p>\n	<span style="font-size:x-small;"><span style="font-family:宋体;"><span style="font-size:x-small;"><span><span style="font-size:small;"> </span></span></span></span></span> \n</p>\n<p>\n	因此，像post_max_size,upload_max_filesize用下面的方法是修改不了的。\n</p>\n<span style="color:#333333;font-family:宋体;"></span> \n<p>\n	<span style="font-size:x-small;"><span style="font-family:宋体;"><span style="font-size:x-small;"><span><span style="font-size:small;"><span style="color:#333333;font-family:宋体;"> </span></span></span></span></span></span> \n</p>\n<pre class="brush:php;">    ini_set(''post_max_size'',''1024M'');  \n    ini_set(''upload_max_filesize'',''1024M'');  </pre>\n<p class="MsoNormal" align="left">\n	<span style="font-size:small;"><span style="color:#333333;font-family:宋体;"> </span></span> \n</p>\n<p>\n	正确做法是用.htaccess文件\n</p>\n<span style="color:#333333;font-family:宋体;"></span> \n<pre class="brush:xml;">php_value upload_max_filesize 50M  \nphp_value post_max_size 100M </pre>\n<span style="font-size:small;"><span style="color:#333333;font-family:宋体;"></span><span style="color:#333333;font-family:Verdana;"></span></span> \n<p class="MsoNormal" align="left">\n	<span style="font-size:small;"><span style="color:#333333;font-family:宋体;"> </span></span> \n</p>\n<p>\n	前提是该站点在httpd.conf中配置了：AllowOverride All 。\n</p>\n<p>\n	<br />\n</p>\n<br />', 2, 0, 'PHP'),
(15, 10, 0, 'php引用的用法', '', '', 22, '1357796878', '<h4>\n	php的引用（就是在变量或者函数、对象等前面加上&amp;符号）\n</h4>\n<p>\n	在PHP 中引用的意思是：不同的名字访问同一个变量内容。\n</p>\n<p>\n	与Ｃ语言中的指针是有差别的．Ｃ语言中的指针里面存储的是变量的内容，在内存中存放的地址。\n</p>\n<h4>\n	<span style="color:#337FE5;">1.变量的引用</span> \n</h4>\n<p>\n	PHP 的引用允许你用两个变量来指向同一个内容\n</p>\n<pre class="brush:php;">&lt;?\n\n    $a="ABC";\n\n    $b =&amp;$a;\n\n    echo $a;//这里输出:ABC\n\n    echo $b;//这里输出:ABC\n\n    $b="EFG";\n\n    echo $a;//这里$a的值变为EFG 所以输出EFG\n\n    echo $b;//这里输出EFG\n\n?&gt;</pre>\n<p>\n	<br />\n</p>\n<h4>\n	<span style="color:#337FE5;">2.函数的引用传递（传址调用）</span> \n</h4>\n<p>\n	传址调用我就不多说了 下面直接给出代码\n</p>\n<pre class="brush:php;">&lt;?php\n\n    function test(&amp;$a)\n\n    {\n\n        $a=$a+100;\n\n    }\n\n    $b=1;\n\n    echo $b;//输出１\n\n    test($b);   //这里$b传递给函数的其实是$b的变量内容所处的内存地址，通过在函数里改变$a的值\n   　就可以改变$b的值了\n\n    echo "&lt;br&gt;";\n\n    echo $b;//输出101\n\n?&gt;</pre>\n<p>\n	要注意的是，在这里test(１);的话就会出错，原因自己去想。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	<strong><span style="color:#337FE5;">注意：</span></strong> \n</p>\n<p>\n	&nbsp;&nbsp;&nbsp; 上面的“&nbsp;test(<span style="color:#800080;">$b</span><span style="color:#000000;">);&nbsp;”&nbsp;中的<span style="color:#800080;">$b</span>前面不要加</span> <span style="color:red;">&amp;</span> 符号，但是在函数“<span style="color:#0000ff;"><strong>call_user_func_array</strong></span>”中，若要引用传参，就得需要&nbsp;<span style="color:red;">&amp;</span> 符号，如下代码所示：\n</p>\n<pre class="brush:php;">&lt;?php\n\nfunction a(&amp;$b){\n\n    $b++;\n\n}\n\n$c=0;\n\ncall_user_func_array(''a'',array(&amp;$c));\n\necho $c;\n\n//输出 1\n\n?&gt;</pre>\n<h4>\n	<br />\n<span style="color:#337FE5;"></span> \n</h4>\n<h4>\n	<span style="color:#337FE5;">3.函数的引用返回</span> \n</h4>\n<p>\n	先看代码\n</p>\n<pre class="brush:php;">&lt;?php\n\nfunction &amp;test()\n\n{\n\n    static $b=0;//申明一个静态变量\n\n    $b=$b+1;\n\n    echo $b;\n\n    return $b;\n\n}\n\n\n\n$a=test();//这条语句会输出　$b的值　为１\n\n$a=5;\n\n$a=test();//这条语句会输出　$b的值　为2\n\n$a=&amp;test();//这条语句会输出　$b的值　为3\n\n$a=5;\n\n$a=test();//这条语句会输出　$b的值　为6\n\n?&gt;</pre>\n下面解释下：　<br />\n通过这种方式$a=test();得到的其实不是函数的引用返回，这跟普通的函数调用没有区别　至于原因：　这是ＰＨＰ的规定<br />\nＰＨＰ规定通过$a=&amp;test(); 方式得到的才是函数的引用返回<br />\n至于什么是引用返回呢（ＰＨＰ手册上说：引用返回用在当想用函数找到引用应该被绑定在哪一个变量上面时。) 这句狗屁话　害我半天没看懂<br />\n<br />\n用上面的例子来解释就是<br />\n$a=test()方式调用函数，只是将函数的值赋给$a而已，　而$a做任何改变　都不会影响到函数中的$b<br />\n而通过$a=&amp;test()方式调用函数呢, 他的作用是　将return $b中的　$b变量的内存地址与$a变量的内存地址　指向了同一个地方<br />\n即产生了相当于这样的效果($a=&amp;$b;) 所以改变$a的值　也同时改变了$b的值　所以在执行了<br />\n$a=&amp;test();<br />\n$a=5;<br />\n以后，$b的值变为了5<br />\n<br />\n这里是为了让大家理解函数的引用返回才使用静态变量的，其实函数的引用返回多用在对象中<br />\n<br />\n另附一个php官方例子：\n<pre class="brush:php;">This is the way how we use pointer to access variable inside the class.\n\n\n\n&lt;?php\n\nclass talker{\n\n\n\n    private $data = ''Hi'';\n\n\n\n    public function &amp; get(){\n\n        return $this-&gt;data;\n\n    }\n\n   \n\n    public function out(){\n\n        echo $this-&gt;data;\n\n    }   \n\n\n\n}\n\n\n\n$aa = new talker();\n\n$d = &amp;$aa-&gt;get();\n\n\n\n$aa-&gt;out();\n\n$d = ''How'';\n\n$aa-&gt;out();\n\n$d = ''Are'';\n\n$aa-&gt;out();\n\n$d = ''You'';\n\n$aa-&gt;out();\n\n?&gt;\n\n\n\nthe output is "HiHowAreYou"</pre>\n<p>\n	<br />\n</p>\n<h4>\n	<span style="color:#337FE5;">4.对象的引用</span> \n</h4>\n<pre class="brush:php;">&lt;?php\n\n    class a{\n\n        var $abc="ABC";\n\n    }\n\n    $b=new a;\n\n    $c=$b;\n\n    echo $b-&gt;abc;//这里输出ABC\n\n    echo $c-&gt;abc;//这里输出ABC\n\n    $b-&gt;abc="DEF";\n\n    echo $c-&gt;abc;//这里输出DEF\n\n?&gt;</pre>\n<p>\n	以上代码是在PHP5中的运行效果\n</p>\n<p>\n	<br />\n</p>\n<p>\n	在PHP5中 对象的赋值是个引用的过程。上列中$b=new a; $c=$b; 其实等效于$b=new a; $c=&amp;$b;\n</p>\n<p>\n	PHP5中默认就是通过引用来调用对象， 但有时你可能想建立一个对象的副本，并希望原来的对象的改变不影响到副本 . 为了这样的目的，PHP5定义了一个特殊的方法，称为__clone。\n</p>\n<p>\n	自 PHP 5 起，new 自动返回引用，因此在此使用 =&amp; 已经过时了并且会产生 E_STRICT 级别的消息。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	在php4中，对象的赋值是个拷贝过程，\n</p>\n<p>\n	如：$b=new a，其中new a产生的是一个匿名的a对象实例，而此时的$b是对这个匿名对象的拷贝。同理$c=$b，也是对$b内容的一个拷贝。所以在php4中，为了节省内存空间，$b=new a 一般会改成引用的模式，即 $b=&amp; new a。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	下面再来个 官方 提供的例子：\n</p>\n<p>\n	在php5中，你不需要额外添加什么东西就可到达“对象引用”的功能：\n</p>\n<pre class="brush:php;">&lt;?php\n\nclass foo{\n\n        protected $name;\n\n        function __construct($str){\n\n            $this-&gt;name = $str;\n\n        }\n\n        function __toString(){\n\n             return  ''my name is "''. $this-&gt;name .''" and I live in "'' . __CLASS__ . ''".'' . "\\n";\n\n        }\n\n        function setName($str){\n\n            $this-&gt;name = $str;\n\n        }\n\n}\n\n\n\nclass MasterOne{\n\n        protected $foo;\n\n        function __construct($f){\n\n                $this-&gt;foo = $f;\n\n        }\n\n        function __toString(){\n\n                return ''Master: '' . __CLASS__ . '' | foo: '' . $this-&gt;foo . "\\n";\n\n        }\n\n        function setFooName($str){\n\n                $this-&gt;foo-&gt;setName( $str );\n\n        }\n\n}\n\n\n\nclass MasterTwo{\n\n        protected $foo;\n\n        function __construct($f){\n\n                $this-&gt;foo = $f;\n\n        }\n\n        function __toString(){\n\n                return ''Master: '' . __CLASS__ . '' | foo: '' . $this-&gt;foo . "\\n";\n\n        }\n\n        function setFooName($str){\n\n                $this-&gt;foo-&gt;setName( $str );\n\n        }\n\n}\n\n\n\n$bar = new foo(''bar'');\n\n\n\nprint("\\n");\n\nprint("Only Created \\$bar and printing \\$bar\\n");\n\nprint( $bar );\n\n\n\nprint("\\n");\n\nprint("Now \\$baz is referenced to \\$bar and printing \\$bar and \\$baz\\n");\n\n$baz =&amp; $bar;\n\nprint( $bar );\n\n\n\nprint("\\n");\n\nprint("Now Creating MasterOne and Two and passing \\$bar to both constructors\\n");\n\n$m1 = new MasterOne( $bar );\n\n$m2 = new MasterTwo( $bar );\n\nprint( $m1 );\n\nprint( $m2 );\n\n\n\nprint("\\n");\n\nprint("Now changing value of \\$bar and printing \\$bar and \\$baz\\n");\n\n$bar-&gt;setName(''baz'');\n\nprint( $bar );\n\nprint( $baz );\n\n\n\nprint("\\n");\n\nprint("Now printing again MasterOne and Two\\n");\n\nprint( $m1 );\n\nprint( $m2 );\n\n\n\nprint("\\n");\n\nprint("Now changing MasterTwo''s foo name and printing again MasterOne and Two\\n");\n\n$m2-&gt;setFooName( ''MasterTwo\\''s Foo'' );\n\nprint( $m1 );\n\nprint( $m2 );\n\n\n\nprint("Also printing \\$bar and \\$baz\\n");\n\nprint( $bar );\n\nprint( $baz );\n\n?&gt;</pre>\n输出：\n<pre class="brush:php;">Only Created $bar and printing $bar\n\nmy name is "bar" and I live in "foo".\n\n\n\nNow $baz is referenced to $bar and printing $bar and $baz\n\nmy name is "bar" and I live in "foo".\n\n\n\nNow Creating MasterOne and Two and passing $bar to both constructors\n\nMaster: MasterOne | foo: my name is "bar" and I live in "foo".\n\n\n\nMaster: MasterTwo | foo: my name is "bar" and I live in "foo".\n\n\n\n\n\nNow changing value of $bar and printing $bar and $baz\n\nmy name is "baz" and I live in "foo".\n\nmy name is "baz" and I live in "foo".\n\n\n\nNow printing again MasterOne and Two\n\nMaster: MasterOne | foo: my name is "baz" and I live in "foo".\n\n\n\nMaster: MasterTwo | foo: my name is "baz" and I live in "foo".\n\n\n\n\n\nNow changing MasterTwo''s foo name and printing again MasterOne and Two\n\nMaster: MasterOne | foo: my name is "MasterTwo''s Foo" and I live in "foo".\n\n\n\nMaster: MasterTwo | foo: my name is "MasterTwo''s Foo" and I live in "foo".\n\n\n\nAlso printing $bar and $baz\n\nmy name is "MasterTwo''s Foo" and I live in "foo".\n\nmy name is "MasterTwo''s Foo" and I live in "foo".</pre>\n上个例子解析：\n<pre class="brush:php;">$bar = new foo(''bar'');\n$m1 = new MasterOne( $bar );\n$m2 = new MasterTwo( $bar );\n</pre>\n实例对象$m1与$m2中的$bar是对实例$bar的引用，而非拷贝，这是php5中，对象引用的特点，也就是说<br />\n1.$m1或$m2内部，任何对$bar的操作都会影响外部对象实例$bar的相关值。<br />\n2.外部对象实例$bar的改变也会影响$m1和$m2内部的$bar的引用相关值。\n<p>\n	&nbsp;\n</p>\n<p>\n	在php4中，要实现如上述的 用一个对象实例去当着另外一个对象的属性时，其等价代码（即引用调用）类似如下：\n</p>\n<pre class="brush:php;">class foo{\n   var $bar;\n   function setBar(&amp;$newBar){\n      $this-&gt;bar =&amp; newBar;\n   }\n}\n</pre>\n<p>\n	<span id="__kindeditor_bookmark_start_127__"></span> \n</p>\n<h4>\n	<span style="color:#337FE5;">5.引用的作用</span> \n</h4>\n<p>\n	&nbsp; &nbsp; 如果程序比较大,引用同一个对象的变量比较多,并且希望用完该对象后手工清除它,个人建议用 "&amp;" 方式,然后用$var=null的方式清除. 其它时候还是用php5的默认方式吧. 另外, php5中对于大数组的传递,建议用 "&amp;" 方式, 毕竟节省内存空间使用。\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	<span style="color:#337FE5;">6.取消引用</span> \n</h4>\n<p>\n	当你 unset 一个引用，只是断开了变量名和变量内容之间的绑定。这并不意味着变量内容被销毁了。例如：\n</p>\n<pre class="brush:php;">&lt;?php\n    $a = 1;\n    $b =&amp; $a;\n    unset ($a);\n?&gt;  </pre>\n<p>\n	不会 unset $b，只是 $a。\n</p>\n<p>\n	<br />\n</p>\n<h4>\n	<span style="color:#337FE5;">7.global 引用</span> \n</h4>\n<p>\n	当用 global $var 声明一个变量时实际上建立了一个到全局变量的引用。也就是说和这样做是相同的：\n</p>\n<pre class="brush:php;">&lt;?php\n    $var =&amp; $GLOBALS["var"];\n?&gt;  </pre>\n<p>\n	<br />\n</p>\n<p>\n	这意味着，例如，unset $var 不会 unset 全局变量。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	如果在一个函数内部给一个声明为 global 的变量赋于一个引用，该引用只在函数内部可见。可以通过使用 $GLOBALS 数组避免这一点。\n</p>\n<p>\n	Example &nbsp;在函数内引用全局变量\n</p>\n<pre class="brush:php;">&lt;?php\n\n$var1 = "Example variable";\n\n$var2 = "";\n\n\n\nfunction global_references($use_globals)\n\n{\n\n    global $var1, $var2;\n\n    if (!$use_globals) {\n\n        $var2 =&amp; $var1; // visible only inside the function\n\n    } else {\n\n        $GLOBALS["var2"] =&amp; $var1; // visible also in global context\n\n    }\n\n}\n\n\n\nglobal_references(false);\n\necho "var2 is set to ''$var2''\\n"; // var2 is set to ''''\n\nglobal_references(true);\n\necho "var2 is set to ''$var2''\\n"; // var2 is set to ''Example variable''\n\n?&gt;</pre>\n<p>\n	把 global $var; 当成是 $var =&amp; $GLOBALS[''var'']; 的简写。从而将其它引用赋给 $var 只改变了本地变量的引用。\n</p>\n<br />\n<h4>\n	<span style="color:#337FE5;">8.$this</span> \n</h4>\n<p>\n	在一个对象的方法中，$this 永远是调用它的对象的引用。\n</p>\n<p>\n	//下面再来个小插曲\n</p>\n<p>\n	php中对于地址的指向（类似指针）功能不是由用户自己来实现的，是由Zend核心实现的，php中引用采用的是“写时拷贝”的原理，就是除非发生写操作，指向同一个地址的变量或者对象是不会被拷贝的。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	通俗的讲\n</p>\n<p>\n	1:如果有下面的代码\n</p>\n<pre class="brush:php;">&lt;?\n    $a="ABC";\n    $b=&amp;$a;\n?&gt;\n</pre>\n<p>\n	其实此时　$a与$b都是指向同一内存地址　而并不是$a与$b占用不同的内存\n</p>\n<p>\n	<br />\n</p>\n<p>\n	２:如果在上面的代码基础上再加上如下代码\n</p>\n<pre class="brush:php;">&lt;?php\n  $a="EFG";\n?&gt;\n</pre>\n<p>\n	由于$a与$b所指向的内存的数据要重新写一次了，此时Zend核心会自动判断　自动为$b生产一个$a的数据拷贝，重新申请一块内存进行存储\n</p>\n<p>\n	<br />\n</p>\n<p>\n	php的引用（就是在变量或者函数、对象等前面加上&amp;符号）是个高级话题，新手多注意，正确的理解php的引用很重要，对性能有较大影响，而且理解错误可能导致程序错误！\n</p>\n<p>\n	<br />\n</p>\n<p>\n	很 多人误解php中的引用跟C当中的指针一样，事实上并非如此，而且很大差别。C语言中的指针除了在数组传递过程中不用显式申明外，其他都需要使用*进行定 义，而php中对于地址的指向（类似指针）功能不是由用户自己来实现的，是由Zend核心实现的，php中引用采用的是“写时拷贝”的原理，就是除非发生 写操作，指向同一个地址的变量或者对象是不会被拷贝的，比如下面的代码：\n</p>\n<pre class="brush:php;">$a = array(''a'',''c''...''n'');\n$b = $a;\n</pre>\n<p>\n	如 果程序仅执行到这里，$a和$b是相同的，但是并没有像C那样，$a和$b占用不同的内存空间，而是指向了同一块内存，这就是php和c的差别，并不需要 写成$b=&amp;$a才表示$b指向$a的内存，zend就已经帮你实现了引用，并且zend会非常智能的帮你去判断什么时候该这样处理，什么时候不 该这样处理。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	如果在后面继续写如下代码，增加一个函数，通过引用的方式传递参数，并打印输出数组大小。\n</p>\n<pre class="brush:php;">function printArray(&amp;$arr) //引用传递\n{\n   print(count($arr));\n\n}\n  printArray($a);\n</pre>\n<p>\n	上面的代码中，我们通过引用把$a数组传入printArray()函数，zend引擎会认为printArray()可能会导致对$a的改变，此时就会自动为$b生产一个$a的数据拷贝，重新申请一块内存进行存储。这就是前面提到的“写时拷贝”概念。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	如果我们把上面的代码改成下面这样：\n</p>\n<pre class="brush:php;">function printArray($arr)   //值传递\n{\n   print(count($arr));\n}\n   printArray($a);\n</pre>\n<p>\n	上面的代码直接传递$a值到printArray()中，此时并不存在引用传递，所以没有出现写时拷贝。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	大家可以测试一下上面两行代码的执行效率，比如外面加入一个循环1000次，看看运行的耗时，结果会让你知道不正确使用引用会导致性能下降30%以上。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	自我理解：按传值的话是与函数内的参数无关，相当于局部变量的作用，而按传址（引用）的话却与函数内的参数有关，相当于全局变量的作用．而从性能方面来说，看上面分析就够．．\n</p>\n<p>\n	<br />\n</p>\n<p>\n	<br />\n</p>', 2, 0, ''),
(16, 30, 0, '如何优化SQL', '', '', 24, '1357885630', '<p>\n	通常网站的性能瓶颈在数据库查询，如果你希望你的网站在一定阶段之内保持稳定，优化你的SQL和数据库是非常必要的一个优化环节。优化数据库是一个很大的话题，这里只是摘要一些比较关键的优化参考建议，并且需要具体分析项目的情况才能给出最合理的优化建议，所以具体的优化建议你应该咨询你公司的架构师或者DBA。\n</p>\n<p>\n	下面是一部分比较重要的建议：\n</p>\n<h4>\n	<br />\n<span style="color:#3E6D8E;"></span> \n</h4>\n<h4>\n	<span style="color:#3E6D8E;">1、选择正确的存储引擎</span> \n</h4>\n<p>\n	以 MySQL为例，包括有两个存储引擎 MyISAM 和 InnoDB，每个引擎都有利有弊。\n</p>\n<p>\n	MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。\n</p>\n<p>\n	InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。但是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。\n</p>\n<h4>\n	<br />\n<span style="color:#3E6D8E;"></span> \n</h4>\n<h4>\n	<span style="color:#3E6D8E;">2、优化字段的数据类型</span> \n</h4>\n<p>\n	记住一个原则，越小的列会越快。对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把你的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。\n</p>\n<p>\n	如果一个表只会有几列罢了（比如说字典表，配置表），那么，我们就没有理由使用 INT 来做主键，使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些。如果你不需要记录时间，使用 DATE 要比 DATETIME 好得多。当然，你也需要留够足够的扩展空间。\n</p>\n<h4>\n	<br />\n<span style="color:#3E6D8E;"></span> \n</h4>\n<h4>\n	<span style="color:#3E6D8E;">3、为搜索字段添加索引</span> \n</h4>\n<p>\n	索引并不一定就是给主键或是唯一的字段。如果在你的表中，有某个字段你总要会经常用来做搜索，那么最好是为其建立索引，除非你要搜索的字段是大的文本字段，那应该建立全文索引。\n</p>\n<h4>\n	<br />\n<span style="color:#3E6D8E;"></span> \n</h4>\n<h4>\n	<span style="color:#3E6D8E;">4、避免使用Select *</span> \n</h4>\n<p>\n	从数据库里读出越多的数据，那么查询就会变得越慢。并且，如果你的数据库服务器和WEB服务器是两台独立的服务器的话，这还会增加网络传输的负载。即使你要查询数据表的所有字段，也尽量不要用*通配符，善用内置提供的字段排除定义也许能给带来更多的便利。\n</p>\n<h4>\n	<br />\n<span style="color:#3E6D8E;"></span> \n</h4>\n<h4>\n	<span style="color:#3E6D8E;">5、使用 ENUM 而不是 VARCHAR</span> \n</h4>\n<p>\n	ENUM 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美。例如，性别、民族、部门和状态之类的这些字段的取值是有限而且固定的，那么，你应该使用 ENUM 而不是 VARCHAR。\n</p>\n<h4>\n	<br />\n<span style="color:#3E6D8E;"></span> \n</h4>\n<h4>\n	<span style="color:#3E6D8E;">6、尽可能的使用 NOT NULL</span> \n</h4>\n<p>\n	除非你有一个很特别的原因去使用 NULL 值，你应该总是让你的字段保持 NOT NULL。 NULL其实需要额外的空间，并且，在你进行比较的时候，你的程序会更复杂。 当然，这里并不是说你就不能使用NULL了，现实情况是很复杂的，依然会有些情况下，你需要使用NULL值。\n</p>\n<h4>\n	<br />\n<span style="color:#3E6D8E;"></span> \n</h4>\n<h4>\n	<span style="color:#3E6D8E;">7、固定长度的表会更快</span> \n</h4>\n<p>\n	如果表中的所有字段都是“固定长度”的，整个表会被认为是 “static” 或 “fixed-length”。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要你包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。\n</p>\n<p>\n	固定长度的表会提高性能，因为MySQL搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。\n</p>\n<p>\n	并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论你用不用，他都是要分配那么多的空间。\n</p>\n<p>\n	使用“垂直分割”技术，你可以分割你的表成为两个一个是定长的，一个则是不定长的。\n</p>\n<h4>\n	<br />\n<span style="color:#3E6D8E;"></span> \n</h4>\n<h4>\n	<span style="color:#3E6D8E;">8、垂直分割</span> \n</h4>\n<p>\n	“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。\n</p>\n<p>\n	例如：在User表中有一个字段是家庭地址，这个字段是可选字段，相比起，而且你在数据库操作的时候除了个人信息外，你并不需要经常读取或是改写这个字段。那么，为什么不把他放到另外一张表中呢？ 这样会让你的表有更好的性能，大家想想是不是，大量的时候，我对于用户表来说，只有用户ID，用户名，口令，用户角色等会被经常使用。小一点的表总是会有好的性能。\n</p>\n<p>\n	另外，你需要注意的是，这些被分出去的字段所形成的表，你不会经常性地去Join他们，不然的话，这样的性能会比不分割时还要差，而且，会是极数级的下降。\n</p>\n<h4>\n	<br />\n<span style="color:#3E6D8E;"></span> \n</h4>\n<h4>\n	<span style="color:#3E6D8E;">9、EXPLAIN 你的 SELECT 查询；</span> \n</h4>\n<p>\n	使用 EXPLAIN 关键字可以让你知道MySQL是如何处理你的SQL语句的。这可以帮你分析你的查询语句或是表结构的性能瓶颈。EXPLAIN 的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的……等等，等等。\n</p>\n<p>\n	通常我们可以对比较复杂的尤其是涉及到多表的SELECT语句，把关键字EXPLAIN加到前面。你可以使用phpmyadmin来做这个事。\n</p>', 2, 0, 'Mysql 性能优化');
INSERT INTO `yulin_archive` (`id`, `sortid`, `paixu`, `title`, `style`, `author`, `clicks`, `creattime`, `content`, `status`, `attribute`, `tags`) VALUES
(17, 10, 0, 'PHP性能优化技巧五条', '', '', 18, '1358239469', '<h4>\n	<span style="color:#337FE5;">1. 不要随便就复制变量</span> \n</h4>\n<p>\n	有时候为了使 PHP 代码更 加整洁，一些 PHP 新手（包括我）会把预定义好的变量复制到一个名字更简短的变量中，其实这样做的结果是增加了一倍的内存消耗，只会使程序更加慢。试想一下，在下面的例子 中，如果用户恶意插入 512KB 字节的文字到文本输入框中，这样就会导致 1MB 的内存被消耗！\n</p>\n<p>\n	不推荐:\n</p>\n<pre class="brush:php;">$description = $_POST[''description''];\necho $description;</pre>\n推荐：\n<pre class="brush:php;">echo $_POST[''description''];</pre>\n<h4>\n	<span style="color:#337FE5;">2. 对字符串使用单引号</span> \n</h4>\n<p>\n	PHP 引擎允许使用单引号和双引号来封装字符串变量，但是这个是有很大的差别的！使用双引号的字符串告诉 PHP 引擎首先去读取字符串内容，查找其中的变量，并改为变量对应的值。一般来说字符串是没有变量的，所以使用双引号会导致性能不佳。最好是使用字符串连接而不 是双引号字符串。\n</p>\n<p>\n	不推荐：\n</p>\n<pre class="brush:php;">$output = "This is a plain string";</pre>\n推荐：\n<pre class="brush:php;">$output = ''This is a plain string'';</pre>\n不推荐：\n<pre class="brush:php;">$type = "mixed";\n$output = "This is a $type string";</pre>\n推荐：\n<pre class="brush:php;">$type = ''mixed'';\n$output = ''This is a '' . $type .'' string'';</pre>\n<h4>\n	<span style="color:#337FE5;">3. 使用 echo 函数来输出字符串</span> \n</h4>\n<p>\n	使用 echo() 函数来打印结果出了有更容易阅读之外，在下个例子中，你还可以看到有更好的性能。\n</p>\n不推荐：\n<pre class="brush:php;">print($myVariable);</pre>\n推荐：\n<pre class="brush:php;">echo $myVariable;</pre>\n<h4>\n	<span style="color:#337FE5;">4. 不要在 echo 中使用连接符</span> \n</h4>\n<p>\n	很多 PHP 程序员（有包括我）不知道在用 恶臭 输出多个变量的时候，其实可以使用逗号来分开的，而不必用字符串先把他们先连起来，如下面的第一个例子中，由于使用了连接符就会有性能问题，因为这样就会 需要 PHP 引擎首先把所有的变量连接起来，然后在输出，而在第二个例子中，PHP 引擎就会按照循序输出他们。\n</p>\n不推荐：\n<pre class="brush:php;">echo ''Hello, my name is'' . $firstName . $lastName . '' and I live in '' . $city;</pre>\n推荐：\n<pre class="brush:php;">echo ''Hello, my name is'' , $firstName , $lastName , '' and I live in '' , $city;</pre>\n<h4>\n	<span style="color:#337FE5;">5. 使用 switch/case 代替 if/else</span> \n</h4>\n<p>\n	对于只有单个变量的判断，使用 switch/case 语句而不是 if/else 语句，会有更好的性能，并且代码更加容易阅读和维护。\n</p>\n不推荐：\n<pre class="brush:php;">if($_POST[''action''] == ''add'') {\n  addUser();\n} elseif ($_POST[''action''] == ''delete'') {\n  deleteUser();\n} elseif ($_POST[''action''] == ''edit'') {\n  editUser();\n} else {\n  defaultAction();\n}</pre>\n推荐：\n<pre class="brush:php;">switch($_POST[''action'']) {\ncase ''add'':\n  addUser();\n  break;\ncase ''delete'':\n   deleteUser();\n  break;\ncase ''edit'':\n   editUser();\n   break;\ndefault:\n   defaultAction();\n   break;\n}</pre>\n<p>\n	<br />\n</p>\n<p>\n	<br />\n</p>', 2, 0, '性能优化'),
(18, 10, 0, '整理的一些PHP常用的函数', '', '', 10, '1358326998', '<ul>\n	<li>\n		array_change_key_case — 返回字符串键名全为小写或大写的数组\n	</li>\n	<li>\n		array_chunk — 将一个数组分割成多个\n	</li>\n	<li>\n		array_combine — 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值\n	</li>\n	<li>\n		array_count_values — 统计数组中所有的值出现的次数\n	</li>\n	<li>\n		array_diff_assoc — 带索引检查计算数组的差集\n	</li>\n	<li>\n		array_diff_key — 使用键名比较计算数组的差集\n	</li>\n	<li>\n		array_diff_uassoc — 用用户提供的回调函数做索引检查来计算数组的差集\n	</li>\n	<li>\n		array_diff_ukey — 用回调函数对键名比较计算数组的差集\n	</li>\n	<li>\n		array_diff — 计算数组的差集\n	</li>\n	<li>\n		array_fill_keys — Fill an array with values, specifying keys\n	</li>\n	<li>\n		array_fill — 用给定的值填充数组\n	</li>\n	<li>\n		array_filter — 用回调函数过滤数组中的单元\n	</li>\n	<li>\n		array_flip — 交换数组中的键和值\n	</li>\n	<li>\n		array_intersect_assoc — 带索引检查计算数组的交集\n	</li>\n	<li>\n		array_intersect_key — 使用键名比较计算数组的交集\n	</li>\n	<li>\n		array_intersect_uassoc — 带索引检查计算数组的交集，用回调函数比较索引\n	</li>\n	<li>\n		array_intersect_ukey — 用回调函数比较键名来计算数组的交集\n	</li>\n	<li>\n		array_intersect — 计算数组的交集\n	</li>\n	<li>\n		array_key_exists — 检查给定的键名或索引是否存在于数组中\n	</li>\n	<li>\n		array_keys — 返回数组中所有的键名\n	</li>\n	<li>\n		array_map — 将回调函数作用到给定数组的单元上\n	</li>\n	<li>\n		array_merge_recursive — 递归地合并一个或多个数组\n	</li>\n	<li>\n		array_merge — 合并一个或多个数组\n	</li>\n	<li>\n		array_multisort — 对多个数组或多维数组进行排序\n	</li>\n	<li>\n		array_pad — 用值将数组填补到指定长度\n	</li>\n	<li>\n		array_pop — 将数组最后一个单元弹出（出栈）\n	</li>\n	<li>\n		array_product — 计算数组中所有值的乘积\n	</li>\n	<li>\n		array_push — 将一个或多个单元压入数组的末尾（入栈）\n	</li>\n	<li>\n		array_rand — 从数组中随机取出一个或多个单元\n	</li>\n	<li>\n		array_reduce — 用回调函数迭代地将数组简化为单一的值\n	</li>\n	<li>\n		array_reverse — 返回一个单元顺序相反的数组\n	</li>\n	<li>\n		array_search — 在数组中搜索给定的值，如果成功则返回相应的键名\n	</li>\n	<li>\n		array_shift — 将数组开头的单元移出数组\n	</li>\n	<li>\n		array_slice — 从数组中取出一段\n	</li>\n	<li>\n		array_splice — 把数组中的一部分去掉并用其它值取代\n	</li>\n	<li>\n		array_sum — 计算数组中所有值的和\n	</li>\n	<li>\n		array_udiff_assoc — 带索引检查计算数组的差集，用回调函数比较数据\n	</li>\n	<li>\n		array_udiff_uassoc — 带索引检查计算数组的差集，用回调函数比较数据和索引\n	</li>\n	<li>\n		array_udiff — 用回调函数比较数据来计算数组的差集\n	</li>\n	<li>\n		array_uintersect_assoc — 带索引检查计算数组的交集，用回调函数比较数据\n	</li>\n	<li>\n		array_uintersect_uassoc — 带索引检查计算数组的交集，用回调函数比较数据和索引\n	</li>\n	<li>\n		array_uintersect — 计算数组的交集，用回调函数比较数据\n	</li>\n	<li>\n		array_unique — 移除数组中重复的值\n	</li>\n	<li>\n		array_unshift — 在数组开头插入一个或多个单元\n	</li>\n	<li>\n		array_values — 返回数组中所有的值\n	</li>\n	<li>\n		array_walk_recursive — 对数组中的每个成员递归地应用用户函数\n	</li>\n	<li>\n		array_walk — 对数组中的每个成员应用用户函数\n	</li>\n	<li>\n		array — 新建一个数组\n	</li>\n	<li>\n		arsort — 对数组进行逆向排序并保持索引关系\n	</li>\n	<li>\n		asort — 对数组进行排序并保持索引关系\n	</li>\n	<li>\n		compact — 建立一个数组，包括变量名和它们的值\n	</li>\n	<li>\n		count — 计算数组中的单元数目或对象中的属性个数\n	</li>\n	<li>\n		current — 返回数组中的当前单元\n	</li>\n	<li>\n		each — 返回数组中当前的键／值对并将数组指针向前移动一步\n	</li>\n	<li>\n		end — 将数组的内部指针指向最后一个单元\n	</li>\n	<li>\n		extract — 从数组中将变量导入到当前的符号表\n	</li>\n	<li>\n		in_array — 检查数组中是否存在某个值\n	</li>\n	<li>\n		key — 从关联数组中取得键名\n	</li>\n	<li>\n		krsort — 对数组按照键名逆向排序\n	</li>\n	<li>\n		ksort — 对数组按照键名排序\n	</li>\n	<li>\n		list — 把数组中的值赋给一些变量\n	</li>\n	<li>\n		natcasesort — 用“自然排序”算法对数组进行不区分大小写字母的排序\n	</li>\n	<li>\n		natsort — 用“自然排序”算法对数组排序\n	</li>\n	<li>\n		next — 将数组中的内部指针向前移动一位\n	</li>\n	<li>\n		pos — current() 的别名\n	</li>\n	<li>\n		prev — 将数组的内部指针倒回一位\n	</li>\n	<li>\n		range — 建立一个包含指定范围单元的数组\n	</li>\n	<li>\n		reset — 将数组的内部指针指向第一个单元\n	</li>\n	<li>\n		rsort — 对数组逆向排序\n	</li>\n	<li>\n		shuffle — 将数组打乱\n	</li>\n	<li>\n		sizeof — count() 的别名\n	</li>\n	<li>\n		sort — 对数组排序\n	</li>\n	<li>\n		uasort — 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联\n	</li>\n	<li>\n		uksort — 使用用户自定义的比较函数对数组中的键名进行排序\n	</li>\n	<li>\n		usort — 使用用户自定义的比较函数对数组中的值进行排序\n	</li>\n	<li>\n		call_user_method_array — 调用一个用户方法，同时传递参数数组（已废弃）\n	</li>\n	<li>\n		call_user_method — 对特定对象调用用户方法（已废弃）\n	</li>\n	<li>\n		class_exists — 检查类是否已定义\n	</li>\n	<li>\n		get_class_methods — 返回由类的方法名组成的数组\n	</li>\n	<li>\n		get_class_vars — 返回由类的默认属性组成的数组\n	</li>\n	<li>\n		get_class — 返回对象的类名\n	</li>\n	<li>\n		get_declared_classes — 返回由已定义类的名字所组成的数组\n	</li>\n	<li>\n		get_declared_interfaces — 返回一个数组包含所有已声明的接口\n	</li>\n	<li>\n		get_object_vars — 返回由对象属性组成的关联数组\n	</li>\n	<li>\n		get_parent_class — 返回对象或类的父类名\n	</li>\n	<li>\n		interface_exists — 检查接口是否已被定义\n	</li>\n	<li>\n		is_a — 如果对象属于该类或该类是此对象的父类则返回 TRUE\n	</li>\n	<li>\n		is_subclass_of — 如果此对象是该类的子类，则返回 TRUE\n	</li>\n	<li>\n		method_exists — 检查类的方法是否存在\n	</li>\n	<li>\n		property_exists — 检查对象或类是否具有该属性\n	</li>\n	<li>\n		checkdate — 验证一个格里高里日期\n	</li>\n	<li>\n		date_default_timezone_get — 取得一个脚本中所有日期时间函数所使用的默认时区\n	</li>\n	<li>\n		date_default_timezone_set — 设定用于一个脚本中所有日期时间函数的默认时区\n	</li>\n	<li>\n		date_time_set — Sets the time\n	</li>\n	<li>\n		date_timezone_get — Return time zone relative to given DateTime\n	</li>\n	<li>\n		date_timezone_set — Sets the time zone for the DateTime object\n	</li>\n	<li>\n		date — 格式化一个本地时间／日期\n	</li>\n	<li>\n		getdate — 取得日期／时间信息\n	</li>\n	<li>\n		gettimeofday — 取得当前时间\n	</li>\n	<li>\n		gmdate — 格式化一个 GMT/UTC 日期／时间\n	</li>\n	<li>\n		gmmktime — 取得 GMT 日期的 UNIX 时间戳\n	</li>\n	<li>\n		gmstrftime — 根据区域设置格式化 GMT/UTC 时间／日期\n	</li>\n	<li>\n		idate — 将本地时间日期格式化为整数\n	</li>\n	<li>\n		localtime — 取得本地时间\n	</li>\n	<li>\n		microtime — 返回当前 Unix 时间戳和微秒数\n	</li>\n	<li>\n		mktime — 取得一个日期的 Unix 时间戳\n	</li>\n	<li>\n		strftime — 根据区域设置格式化本地时间／日期\n	</li>\n	<li>\n		strptime — 解析由 strftime() 生成的日期／时间\n	</li>\n	<li>\n		strtotime — 将任何英文文本的日期时间描述解析为 Unix 时间戳\n	</li>\n	<li>\n		time — 返回当前的 Unix 时间戳\n	</li>\n	<li>\n		chdir — 改变目录\n	</li>\n	<li>\n		chroot — 改变根目录\n	</li>\n	<li>\n		dir — directory 类\n	</li>\n	<li>\n		closedir — 关闭目录句柄\n	</li>\n	<li>\n		getcwd — 取得当前工作目录\n	</li>\n	<li>\n		opendir — 打开目录句柄\n	</li>\n	<li>\n		readdir — 从目录句柄中读取条目\n	</li>\n	<li>\n		rewinddir — 倒回目录句柄\n	</li>\n	<li>\n		scandir — 列出指定路径中的文件和目录\n	</li>\n	<li>\n		basename — 返回路径中的文件名部分\n	</li>\n	<li>\n		chgrp — 改变文件所属的组\n	</li>\n	<li>\n		chmod — 改变文件模式\n	</li>\n	<li>\n		chown — 改变文件的所有者\n	</li>\n	<li>\n		clearstatcache — 清除文件状态缓存\n	</li>\n	<li>\n		copy — 拷贝文件\n	</li>\n	<li>\n		delete — 参见 unlink() 或 unset()\n	</li>\n	<li>\n		dirname — 返回路径中的目录部分\n	</li>\n	<li>\n		disk_free_space — 返回目录中的可用空间\n	</li>\n	<li>\n		disk_total_space — 返回一个目录的磁盘总大小\n	</li>\n	<li>\n		diskfreespace — disk_free_space() 的别名\n	</li>\n	<li>\n		fclose — 关闭一个已打开的文件指针\n	</li>\n	<li>\n		feof — 测试文件指针是否到了文件结束的位置\n	</li>\n	<li>\n		fflush — 将缓冲内容输出到文件\n	</li>\n	<li>\n		fgetc — 从文件指针中读取字符\n	</li>\n	<li>\n		fgetcsv — 从文件指针中读入一行并解析 CSV 字段\n	</li>\n	<li>\n		fgets — 从文件指针中读取一行\n	</li>\n	<li>\n		fgetss — 从文件指针中读取一行并过滤掉 HTML 标记\n	</li>\n	<li>\n		file_exists — 检查文件或目录是否存在\n	</li>\n	<li>\n		file_get_contents — 将整个文件读入一个字符串\n	</li>\n	<li>\n		file_put_contents — 将一个字符串写入文件\n	</li>\n	<li>\n		file — 把整个文件读入一个数组中\n	</li>\n	<li>\n		fileatime — 取得文件的上次访问时间\n	</li>\n	<li>\n		filectime — 取得文件的 inode 修改时间\n	</li>\n	<li>\n		filegroup — 取得文件的组\n	</li>\n	<li>\n		fileinode — 取得文件的 inode\n	</li>\n	<li>\n		filemtime — 取得文件修改时间\n	</li>\n	<li>\n		fileowner — 取得文件的所有者\n	</li>\n	<li>\n		fileperms — 取得文件的权限\n	</li>\n	<li>\n		filesize — 取得文件大小\n	</li>\n	<li>\n		filetype — 取得文件类型\n	</li>\n	<li>\n		flock — 轻便的咨询文件锁定\n	</li>\n	<li>\n		fnmatch — 用模式匹配文件名\n	</li>\n	<li>\n		fopen — 打开文件或者 URL\n	</li>\n	<li>\n		fpassthru — 输出文件指针处的所有剩余数据\n	</li>\n	<li>\n		fputcsv — 将行格式化为 CSV 并写入文件指针\n	</li>\n	<li>\n		fputs — fwrite() 的别名\n	</li>\n	<li>\n		fread — 读取文件（可安全用于二进制文件）\n	</li>\n	<li>\n		fscanf — 从文件中格式化输入\n	</li>\n	<li>\n		fseek — 在文件指针中定位\n	</li>\n	<li>\n		fstat — 通过已打开的文件指针取得文件信息\n	</li>\n	<li>\n		ftell — 返回文件指针读/写的位置\n	</li>\n	<li>\n		ftruncate — 将文件截断到给定的长度\n	</li>\n	<li>\n		fwrite — 写入文件（可安全用于二进制文件）\n	</li>\n	<li>\n		glob — 寻找与模式匹配的文件路径\n	</li>\n	<li>\n		is_dir — 判断给定文件名是否是一个目录\n	</li>\n	<li>\n		is_executable — 判断给定文件名是否可执行\n	</li>\n	<li>\n		is_file — 判断给定文件名是否为一个正常的文件\n	</li>\n	<li>\n		is_link — 判断给定文件名是否为一个符号连接\n	</li>\n	<li>\n		is_readable — 判断给定文件名是否可读\n	</li>\n	<li>\n		is_uploaded_file — 判断文件是否是通过 HTTP POST 上传的\n	</li>\n	<li>\n		is_writable — 判断给定的文件名是否可写\n	</li>\n	<li>\n		is_writeable — is_writable() 的别名\n	</li>\n	<li>\n		lchgrp — Changes group ownership of symlink\n	</li>\n	<li>\n		lchown — Changes user ownership of symlink\n	</li>\n	<li>\n		link — 建立一个硬连接\n	</li>\n	<li>\n		linkinfo — 获取一个连接的信息\n	</li>\n	<li>\n		lstat — 给出一个文件或符号连接的信息\n	</li>\n	<li>\n		mkdir — 新建目录\n	</li>\n	<li>\n		move_uploaded_file — 将上传的文件移动到新位置\n	</li>\n	<li>\n		parse_ini_file — 解析一个配置文件\n	</li>\n	<li>\n		pathinfo — 返回文件路径的信息\n	</li>\n	<li>\n		pclose — 关闭进程文件指针\n	</li>\n	<li>\n		popen — 打开进程文件指针\n	</li>\n	<li>\n		readfile — 输出一个文件\n	</li>\n	<li>\n		readlink — 返回符号连接指向的目标\n	</li>\n	<li>\n		realpath — 返回规范化的绝对路径名\n	</li>\n	<li>\n		rename — 重命名一个文件或目录\n	</li>\n	<li>\n		rewind — 倒回文件指针的位置\n	</li>\n	<li>\n		rmdir — 删除目录\n	</li>\n	<li>\n		set_file_buffer — stream_set_write_buffer() 的别名\n	</li>\n	<li>\n		stat — 给出文件的信息\n	</li>\n	<li>\n		symlink — 建立符号连接\n	</li>\n	<li>\n		tempnam — 建立一个具有唯一文件名的文件\n	</li>\n	<li>\n		tmpfile — 建立一个临时文件\n	</li>\n	<li>\n		touch — 设定文件的访问和修改时间\n	</li>\n	<li>\n		umask — 改变当前的 umask\n	</li>\n	<li>\n		unlink — 删除文件\n	</li>\n	<li>\n		mail — 发送邮件\n	</li>\n	<li>\n		abs — 绝对值\n	</li>\n	<li>\n		acos — 反余弦\n	</li>\n	<li>\n		acosh — 反双曲余弦\n	</li>\n	<li>\n		asin — 反正弦\n	</li>\n	<li>\n		asinh — 反双曲正弦\n	</li>\n	<li>\n		atan2 — 两个参数的反正切\n	</li>\n	<li>\n		atan — 反正切\n	</li>\n	<li>\n		atanh — 反双曲正切\n	</li>\n	<li>\n		base_convert — 在任意进制之间转换数字\n	</li>\n	<li>\n		bindec — 二进制转换为十进制\n	</li>\n	<li>\n		ceil — 进一法取整\n	</li>\n	<li>\n		cos — 余弦\n	</li>\n	<li>\n		cosh — 双曲余弦\n	</li>\n	<li>\n		decbin — 十进制转换为二进制\n	</li>\n	<li>\n		dechex — 十进制转换为十六进制\n	</li>\n	<li>\n		decoct — 十进制转换为八进制\n	</li>\n	<li>\n		deg2rad — 将角度转换为弧度\n	</li>\n	<li>\n		exp — 计算 e 的指数\n	</li>\n	<li>\n		expm1 — 返回 exp(number) – 1，甚至当 number 的值接近零也能计算出准确结果\n	</li>\n	<li>\n		floor — 舍去法取整\n	</li>\n	<li>\n		fmod — 返回除法的浮点数余数\n	</li>\n	<li>\n		getrandmax — 显示随机数最大的可能值\n	</li>\n	<li>\n		hexdec — 十六进制转换为十进制\n	</li>\n	<li>\n		hypot — 计算一直角三角形的斜边长度\n	</li>\n	<li>\n		is_finite — 判断是否为有限值\n	</li>\n	<li>\n		is_infinite — 判断是否为无限值\n	</li>\n	<li>\n		is_nan — 判断是否为合法数值\n	</li>\n	<li>\n		lcg_value — 组合线性同余发生器\n	</li>\n	<li>\n		log10 — 以 10 为底的对数\n	</li>\n	<li>\n		log1p — 返回 log(1 + number)，甚至当 number 的值接近零也能计算出准确结果\n	</li>\n	<li>\n		log — 自然对数\n	</li>\n	<li>\n		max — 找出最大值\n	</li>\n	<li>\n		min — 找出最小值\n	</li>\n	<li>\n		mt_getrandmax — 显示随机数的最大可能值\n	</li>\n	<li>\n		mt_rand — 生成更好的随机数\n	</li>\n	<li>\n		mt_srand — 播下一个更好的随机数发生器种子\n	</li>\n	<li>\n		octdec — 八进制转换为十进制\n	</li>\n	<li>\n		pi — 得到圆周率值\n	</li>\n	<li>\n		pow — 指数表达式\n	</li>\n	<li>\n		rad2deg — 将弧度数转换为相应的角度数\n	</li>\n	<li>\n		rand — 产生一个随机整数\n	</li>\n	<li>\n		round — 对浮点数进行四舍五入\n	</li>\n	<li>\n		sin — 正弦\n	</li>\n	<li>\n		sinh — 双曲正弦\n	</li>\n	<li>\n		sqrt — 平方根\n	</li>\n	<li>\n		srand — 播下随机数发生器种子\n	</li>\n	<li>\n		tan — 正切\n	</li>\n	<li>\n		tanh — 双曲正切\n	</li>\n	<li>\n		mysql_affected_rows — 取得前一次 MySQL 操作所影响的记录行数\n	</li>\n	<li>\n		mysql_change_user — 改变活动连接中登录的用户\n	</li>\n	<li>\n		mysql_client_encoding — 返回字符集的名称\n	</li>\n	<li>\n		mysql_close — 关闭 MySQL 连接\n	</li>\n	<li>\n		mysql_connect — 打开一个到 MySQL 服务器的连接\n	</li>\n	<li>\n		mysql_create_db — 新建一个 MySQL 数据库\n	</li>\n	<li>\n		mysql_data_seek — 移动内部结果的指针\n	</li>\n	<li>\n		mysql_db_name — 取得结果数据\n	</li>\n	<li>\n		mysql_db_query — 发送一条 MySQL 查询\n	</li>\n	<li>\n		mysql_drop_db — 丢弃（删除）一个 MySQL 数据库\n	</li>\n	<li>\n		mysql_errno — 返回上一个 MySQL 操作中的错误信息的数字编码\n	</li>\n	<li>\n		mysql_error — 返回上一个 MySQL 操作产生的文本错误信息\n	</li>\n	<li>\n		mysql_escape_string — 转义一个字符串用于 mysql_query\n	</li>\n	<li>\n		mysql_fetch_array — 从结果集中取得一行作为关联数组，或数字数组，或二者兼有\n	</li>\n	<li>\n		mysql_fetch_assoc — 从结果集中取得一行作为关联数组\n	</li>\n	<li>\n		mysql_fetch_field — 从结果集中取得列信息并作为对象返回\n	</li>\n	<li>\n		mysql_fetch_lengths — 取得结果集中每个输出的长度\n	</li>\n	<li>\n		mysql_fetch_object — 从结果集中取得一行作为对象\n	</li>\n	<li>\n		mysql_fetch_row — 从结果集中取得一行作为枚举数组\n	</li>\n	<li>\n		mysql_field_flags — 从结果中取得和指定字段关联的标志\n	</li>\n	<li>\n		mysql_field_len — 返回指定字段的长度\n	</li>\n	<li>\n		mysql_field_name — 取得结果中指定字段的字段名\n	</li>\n	<li>\n		mysql_field_seek — 将结果集中的指针设定为制定的字段偏移量\n	</li>\n	<li>\n		mysql_field_table — 取得指定字段所在的表名\n	</li>\n	<li>\n		mysql_field_type — 取得结果集中指定字段的类型\n	</li>\n	<li>\n		mysql_free_result — 释放结果内存\n	</li>\n	<li>\n		mysql_get_client_info — 取得 MySQL 客户端信息\n	</li>\n	<li>\n		mysql_get_host_info — 取得 MySQL 主机信息\n	</li>\n	<li>\n		mysql_get_proto_info — 取得 MySQL 协议信息\n	</li>\n	<li>\n		mysql_get_server_info — 取得 MySQL 服务器信息\n	</li>\n	<li>\n		mysql_info — 取得最近一条查询的信息\n	</li>\n	<li>\n		mysql_insert_id — 取得上一步 INSERT 操作产生的 ID\n	</li>\n	<li>\n		mysql_list_dbs — 列出 MySQL 服务器中所有的数据库\n	</li>\n	<li>\n		mysql_list_fields — 列出 MySQL 结果中的字段\n	</li>\n	<li>\n		mysql_list_processes — 列出 MySQL 进程\n	</li>\n	<li>\n		mysql_list_tables — 列出 MySQL 数据库中的表\n	</li>\n	<li>\n		mysql_num_fields — 取得结果集中字段的数目\n	</li>\n	<li>\n		mysql_num_rows — 取得结果集中行的数目\n	</li>\n	<li>\n		mysql_pconnect — 打开一个到 MySQL 服务器的持久连接\n	</li>\n	<li>\n		mysql_ping — Ping 一个服务器连接，如果没有连接则重新连接\n	</li>\n	<li>\n		mysql_query — 发送一条 MySQL 查询\n	</li>\n	<li>\n		mysql_real_escape_string — 转义 SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集\n	</li>\n	<li>\n		mysql_result — 取得结果数据\n	</li>\n	<li>\n		mysql_select_db — 选择 MySQL 数据库\n	</li>\n	<li>\n		mysql_stat — 取得当前系统状态\n	</li>\n	<li>\n		mysql_tablename — 取得表名\n	</li>\n	<li>\n		mysql_thread_id — 返回当前线程的 ID\n	</li>\n	<li>\n		mysql_unbuffered_query — 向 MySQL 发送一条 SQL 查询，并不获取和缓存结果的行\n	</li>\n	<li>\n		flush — 刷新输出缓冲\n	</li>\n	<li>\n		ob_clean — Clean (erase) the output buffer\n	</li>\n	<li>\n		ob_end_clean — Clean (erase) the output buffer and turn off output buffering\n	</li>\n	<li>\n		ob_end_flush — Flush (send) the output buffer and turn off output buffering\n	</li>\n	<li>\n		ob_flush — Flush (send) the output buffer\n	</li>\n	<li>\n		ob_get_clean — Get current buffer contents and delete current output buffer\n	</li>\n	<li>\n		ob_get_contents — Return the contents of the output buffer\n	</li>\n	<li>\n		ob_get_flush — Flush the output buffer, return it as a string and turn off output buffering\n	</li>\n	<li>\n		ob_get_length — Return the length of the output buffer\n	</li>\n	<li>\n		ob_get_level — Return the nesting level of the output buffering mechanism\n	</li>\n	<li>\n		ob_get_status — Get status of output buffers\n	</li>\n	<li>\n		ob_gzhandler — ob_start callback function to gzip output buffer\n	</li>\n	<li>\n		ob_implicit_flush — Turn implicit flush on/off\n	</li>\n	<li>\n		ob_list_handlers — List all output handlers in use\n	</li>\n	<li>\n		ob_start — Turn on output buffering\n	</li>\n	<li>\n		output_add_rewrite_var — Add URL rewriter values\n	</li>\n	<li>\n		output_reset_rewrite_vars — Reset URL rewriter values\n	</li>\n	<li>\n		preg_grep — 返回与模式匹配的数组单元\n	</li>\n	<li>\n		preg_last_error — Returns the error code of the last PCRE regex execution\n	</li>\n	<li>\n		preg_match_all — 进行全局正则表达式匹配\n	</li>\n	<li>\n		preg_match — 进行正则表达式匹配\n	</li>\n	<li>\n		preg_quote — 转义正则表达式字符\n	</li>\n	<li>\n		preg_replace_callback — 用回调函数执行正则表达式的搜索和替换\n	</li>\n	<li>\n		preg_replace — 执行正则表达式的搜索和替换\n	</li>\n	<li>\n		preg_split — 用正则表达式分割字符串\n	</li>\n	<li>\n		session_cache_expire — Return current cache expire\n	</li>\n	<li>\n		session_cache_limiter — Get and/or set the current cache limiter\n	</li>\n	<li>\n		session_commit — session_write_close() 的别名\n	</li>\n	<li>\n		session_decode — Decodes session data from a string\n	</li>\n	<li>\n		session_destroy — Destroys all data registered to a session\n	</li>\n	<li>\n		session_encode — 将当前会话数据编码为一个字符串\n	</li>\n	<li>\n		session_get_cookie_params — Get the session cookie parameters\n	</li>\n	<li>\n		session_id — Get and/or set the current session id\n	</li>\n	<li>\n		session_is_registered — Find out whether a global variable is registered in a session\n	</li>\n	<li>\n		session_module_name — Get and/or set the current session module\n	</li>\n	<li>\n		session_name — Get and/or set the current session name\n	</li>\n	<li>\n		session_regenerate_id — Update the current session id with a newly generated one\n	</li>\n	<li>\n		session_register — Register one or more global variables with the current session\n	</li>\n	<li>\n		session_save_path — Get and/or set the current session save path\n	</li>\n	<li>\n		session_set_cookie_params — Set the session cookie parameters\n	</li>\n	<li>\n		session_set_save_handler — Sets user-level session storage functions\n	</li>\n	<li>\n		session_start — Initialize session data\n	</li>\n	<li>\n		session_unregister — Unregister a global variable from the current session\n	</li>\n	<li>\n		session_unset — Free all session variables\n	</li>\n	<li>\n		session_write_close — Write session data and end session\n	</li>\n	<li>\n		ereg_replace — 正则表达式替换\n	</li>\n	<li>\n		ereg — 正则表达式匹配\n	</li>\n	<li>\n		eregi_replace — 不区分大小写的正则表达式替换\n	</li>\n	<li>\n		eregi — 不区分大小写的正则表达式匹配\n	</li>\n	<li>\n		split — 用正则表达式将字符串分割到数组中\n	</li>\n	<li>\n		spliti — 用正则表达式不区分大小写将字符串分割到数组中\n	</li>\n	<li>\n		sql_regcase — 产生用于不区分大小的匹配的正则表达式\n	</li>\n	<li>\n		addcslashes — 以 C 语言风格使用反斜线转义字符串中的字符\n	</li>\n	<li>\n		addslashes — 使用反斜线引用字符串\n	</li>\n	<li>\n		bin2hex — 将二进制数据转换成十六进制表示\n	</li>\n	<li>\n		chop — rtrim() 的别名\n	</li>\n	<li>\n		chr — 返回指定的字符\n	</li>\n	<li>\n		chunk_split — 将字符串分割成小块\n	</li>\n	<li>\n		count_chars — 返回字符串所用字符的信息\n	</li>\n	<li>\n		crc32 — 计算一个字符串的 crc32 多项式\n	</li>\n	<li>\n		crypt — One-way string encryption (hashing)\n	</li>\n	<li>\n		echo — Output one or more strings\n	</li>\n	<li>\n		explode — 使用一个字符串分割另一个字符串\n	</li>\n	<li>\n		fprintf — Write a formatted string to a stream\n	</li>\n	<li>\n		get_html_translation_table — Returns the translation table used by htmlspecialchars() and htmlentities()\n	</li>\n	<li>\n		hebrev — Convert logical Hebrew text to visual text\n	</li>\n	<li>\n		hebrevc — Convert logical Hebrew text to visual text with newline conversion\n	</li>\n	<li>\n		html_entity_decode — Convert all HTML entities to their applicable characters\n	</li>\n	<li>\n		htmlentities — Convert all applicable characters to HTML entities\n	</li>\n	<li>\n		htmlspecialchars_decode — Convert special HTML entities back to characters\n	</li>\n	<li>\n		htmlspecialchars — Convert special characters to HTML entities\n	</li>\n	<li>\n		implode — Join array elements with a string\n	</li>\n	<li>\n		join — 别名 implode()\n	</li>\n	<li>\n		levenshtein — Calculate Levenshtein distance between two strings\n	</li>\n	<li>\n		localeconv — Get numeric formatting information\n	</li>\n	<li>\n		ltrim — Strip whitespace (or other characters) from the beginning of a string\n	</li>\n	<li>\n		md5_file — Calculates the md5 hash of a given file\n	</li>\n	<li>\n		md5 — Calculate the md5 hash of a string\n	</li>\n	<li>\n		metaphone — Calculate the metaphone key of a string\n	</li>\n	<li>\n		money_format — Formats a number as a currency string\n	</li>\n	<li>\n		nl_langinfo — Query language and locale information\n	</li>\n	<li>\n		nl2br — Inserts HTML line breaks before all newlines in a string\n	</li>\n	<li>\n		number_format — Format a number with grouped thousands\n	</li>\n	<li>\n		ord — Return ASCII value of character\n	</li>\n	<li>\n		parse_str — Parses the string into variables\n	</li>\n	<li>\n		print — Output a string\n	</li>\n	<li>\n		printf — Output a formatted string\n	</li>\n	<li>\n		quoted_printable_decode — Convert a quoted-printable string to an 8 bit string\n	</li>\n	<li>\n		quotemeta — Quote meta characters\n	</li>\n	<li>\n		rtrim — Strip whitespace (or other characters) from the end of a string\n	</li>\n	<li>\n		setlocale — Set locale information\n	</li>\n	<li>\n		sha1_file — Calculate the sha1 hash of a file\n	</li>\n	<li>\n		sha1 — Calculate the sha1 hash of a string\n	</li>\n	<li>\n		similar_text — Calculate the similarity between two strings\n	</li>\n	<li>\n		soundex — Calculate the soundex key of a string\n	</li>\n	<li>\n		sprintf — Return a formatted string\n	</li>\n	<li>\n		sscanf — Parses input from a string according to a format\n	</li>\n	<li>\n		str_getcsv — Parse a CSV string into an array\n	</li>\n	<li>\n		str_ireplace — Case-insensitive version of str_replace().\n	</li>\n	<li>\n		str_pad — Pad a string to a certain length with another string\n	</li>\n	<li>\n		str_repeat — Repeat a string\n	</li>\n	<li>\n		str_replace — Replace all occurrences of the search string with the replacement string\n	</li>\n	<li>\n		str_rot13 — Perform the rot13 transform on a string\n	</li>\n	<li>\n		str_shuffle — Randomly shuffles a string\n	</li>\n	<li>\n		str_split — Convert a string to an array\n	</li>\n	<li>\n		str_word_count — Return information about words used in a string\n	</li>\n	<li>\n		strcasecmp — Binary safe case-insensitive string comparison\n	</li>\n	<li>\n		strchr — 别名 strstr()\n	</li>\n	<li>\n		strcmp — Binary safe string comparison\n	</li>\n	<li>\n		strcoll — Locale based string comparison\n	</li>\n	<li>\n		strcspn — Find length of initial segment not matching mask\n	</li>\n	<li>\n		strip_tags — Strip HTML and PHP tags from a string\n	</li>\n	<li>\n		stripcslashes — Un-quote string quoted with addcslashes()\n	</li>\n	<li>\n		stripos — Find position of first occurrence of a case-insensitive string\n	</li>\n	<li>\n		stripslashes — Un-quote string quoted with addslashes()\n	</li>\n	<li>\n		stristr — Case-insensitive strstr()\n	</li>\n	<li>\n		strlen — Get string length\n	</li>\n	<li>\n		strnatcasecmp — Case insensitive string comparisons using a “natural order” algorithm\n	</li>\n	<li>\n		strnatcmp — String comparisons using a “natural order” algorithm\n	</li>\n	<li>\n		strncasecmp — Binary safe case-insensitive string comparison of the first n characters\n	</li>\n	<li>\n		strncmp — Binary safe string comparison of the first n characters\n	</li>\n	<li>\n		strpbrk — Search a string for any of a set of characters\n	</li>\n	<li>\n		strpos — Find position of first occurrence of a string\n	</li>\n	<li>\n		strrchr — Find the last occurrence of a character in a string\n	</li>\n	<li>\n		strrev — Reverse a string\n	</li>\n	<li>\n		strripos — Find position of last occurrence of a case-insensitive string in a string\n	</li>\n	<li>\n		strrpos — Find position of last occurrence of a char in a string\n	</li>\n	<li>\n		strspn — Find length of initial segment matching mask\n	</li>\n	<li>\n		strstr — Find first occurrence of a string\n	</li>\n	<li>\n		strtok — Tokenize string\n	</li>\n	<li>\n		strtolower — Make a string lowercase\n	</li>\n	<li>\n		strtoupper — Make a string uppercase\n	</li>\n	<li>\n		strtr — Translate certain characters\n	</li>\n	<li>\n		substr_compare — Binary safe optionally case insensitive comparison of 2 strings from an offset, up to length characters\n	</li>\n	<li>\n		substr_count — Count the number of substring occurrences\n	</li>\n	<li>\n		substr_replace — Replace text within a portion of a string\n	</li>\n	<li>\n		substr — Return part of a string\n	</li>\n	<li>\n		trim — Strip whitespace (or other characters) from the beginning and end of a string\n	</li>\n	<li>\n		ucfirst — Make a string’s first character uppercase\n	</li>\n	<li>\n		ucwords — Uppercase the first character of each word in a string\n	</li>\n	<li>\n		vfprintf — Write a formatted string to a stream\n	</li>\n	<li>\n		vprintf — Output a formatted string\n	</li>\n	<li>\n		vsprintf — Return a formatted string\n	</li>\n	<li>\n		wordwrap — Wraps a string to a given number of characters using a string break character\n	</li>\n	<li>\n		base64_decode — 对使用 MIME base64 编码的数据进行解码\n	</li>\n	<li>\n		base64_encode — 使用 MIME base64 对数据进行编码\n	</li>\n	<li>\n		get_headers — 取得服务器响应一个 HTTP 请求所发送的所有标头\n	</li>\n	<li>\n		get_meta_tags — 从一个文件中提取所有的 meta 标签 content 属性，返回一个数组\n	</li>\n	<li>\n		http_build_query — 生成 URL-encode 之后的请求字符串\n	</li>\n	<li>\n		parse_url — 解析 URL，返回其组成部分\n	</li>\n	<li>\n		rawurldecode — 对已编码的 URL 字符串进行解码\n	</li>\n	<li>\n		rawurlencode — 按照 RFC 1738 对 URL 进行编码\n	</li>\n	<li>\n		urldecode — 解码已编码的 URL 字符串\n	</li>\n	<li>\n		urlencode — 编码 URL 字符串\n	</li>\n	<li>\n		debug_zval_dump — Dumps a string representation of an internal zend value to output\n	</li>\n	<li>\n		doubleval — floatval() 的别名\n	</li>\n	<li>\n		empty — 检查一个变量是否为空\n	</li>\n	<li>\n		floatval — 获取变量的浮点值\n	</li>\n	<li>\n		get_defined_vars — 返回由所有已定义变量所组成的数组\n	</li>\n	<li>\n		get_resource_type — 返回资源（resource）类型\n	</li>\n	<li>\n		gettype — 获取变量的类型\n	</li>\n	<li>\n		import_request_variables — 将 GET／POST／Cookie 变量导入到全局作用域中\n	</li>\n	<li>\n		intval — 获取变量的整数值\n	</li>\n	<li>\n		is_array — 检测变量是否是数组\n	</li>\n	<li>\n		is_binary — Finds whether a variable is a native binary string\n	</li>\n	<li>\n		is_bool — 检测变量是否是布尔型\n	</li>\n	<li>\n		is_buffer — Finds whether a variable is a native unicode or binary string\n	</li>\n	<li>\n		is_callable — 检测参数是否为合法的可调用结构\n	</li>\n	<li>\n		is_double — is_float() 的别名\n	</li>\n	<li>\n		is_float — 检测变量是否是浮点型\n	</li>\n	<li>\n		is_int — 检测变量是否是整数\n	</li>\n	<li>\n		is_integer — is_int() 的别名\n	</li>\n	<li>\n		is_long — is_int() 的别名\n	</li>\n	<li>\n		is_null — 检测变量是否为 NULL\n	</li>\n	<li>\n		is_numeric — 检测变量是否为数字或数字字符串\n	</li>\n	<li>\n		is_object — 检测变量是否是一个对象\n	</li>\n	<li>\n		is_real — is_float() 的别名\n	</li>\n	<li>\n		is_resource — 检测变量是否为资源类型\n	</li>\n	<li>\n		is_scalar — 检测变量是否是一个标量\n	</li>\n	<li>\n		is_string — 检测变量是否是字符串\n	</li>\n	<li>\n		is_unicode — Finds whether a variable is a unicode string\n	</li>\n	<li>\n		isset — 检测变量是否设置\n	</li>\n	<li>\n		print_r — 打印关于变量的易于理解的信息。\n	</li>\n	<li>\n		serialize — 产生一个可存储的值的表示\n	</li>\n	<li>\n		settype — 设置变量的类型\n	</li>\n	<li>\n		strval — 获取变量的字符串值\n	</li>\n	<li>\n		unserialize — 从已存储的表示中创建 PHP 的值\n	</li>\n	<li>\n		unset — 释放给定的变量\n	</li>\n	<li>\n		var_dump — 打印变量的相关信息\n	</li>\n	<li>\n		var_export — 输出或返回一个变量的字符串表示\n	</li>\n</ul>', 2, 0, '常用函数');

-- --------------------------------------------------------

--
-- 表的结构 `yulin_attach`
--

CREATE TABLE IF NOT EXISTS `yulin_attach` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `type` varchar(255) DEFAULT NULL,
  `extension` varchar(20) NOT NULL,
  `size` varchar(20) NOT NULL,
  `savepath` varchar(255) NOT NULL,
  `savename` varchar(255) NOT NULL,
  `module` varchar(100) NOT NULL,
  `record_id` int(11) NOT NULL,
  `user_id` varchar(50) DEFAULT NULL,
  `create_time` int(11) unsigned DEFAULT NULL,
  `download_count` mediumint(9) unsigned NOT NULL DEFAULT '0',
  `remark` varchar(255) NOT NULL,
  `update_time` int(11) unsigned NOT NULL,
  `status` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `module` (`module`),
  KEY `recordId` (`record_id`),
  KEY `userId` (`user_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='附件' AUTO_INCREMENT=21 ;

-- --------------------------------------------------------

--
-- 表的结构 `yulin_comment`
--

CREATE TABLE IF NOT EXISTS `yulin_comment` (
  `id` int(8) unsigned NOT NULL AUTO_INCREMENT,
  `review_id` int(8) unsigned NOT NULL,
  `name` varchar(50) CHARACTER SET utf8 NOT NULL,
  `content` varchar(400) CHARACTER SET utf8 NOT NULL,
  `module` varchar(20) CHARACTER SET utf8 NOT NULL,
  `record_id` int(8) NOT NULL,
  `time` varchar(40) CHARACTER SET utf8 NOT NULL,
  `status` int(1) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=64 ;

--
-- 转存表中的数据 `yulin_comment`
--

INSERT INTO `yulin_comment` (`id`, `review_id`, `name`, `content`, `module`, `record_id`, `time`, `status`) VALUES
(24, 0, '', 'fasdfasf', 'Archive', 11, '1357607209', 2),
(25, 0, '', '3131', 'Archive', 7, '1357723548', 2),
(28, 0, '', 'sasas', 'Archive', 4, '1357874807', 2),
(30, 24, '', '欢迎测试', 'Archive', 11, '1357886640', 2),
(31, 25, '', '欢迎测试', 'Archive', 7, '1357886666', 2),
(32, 28, '', '欢迎测试', 'Archive', 4, '1357886689', 2),
(33, 0, '', '13', 'Archive', 13, '1357895081', 1),
(34, 0, '', ' ', 'Archive', 15, '1358233722', 1),
(35, 0, '', ' ', 'Archive', 15, '1358233727', 1),
(36, 0, '', ' ', 'Archive', 15, '1358233729', 1),
(37, 0, '', '  ', 'Archive', 15, '1358233730', 1),
(38, 0, '', '     ', 'Archive', 15, '1358233733', 1),
(39, 0, '', '   ', 'Archive', 15, '1358233735', 1),
(40, 0, '', '     ', 'Archive', 15, '1358233737', 1),
(41, 0, '', '     ', 'Archive', 15, '1358233740', 1),
(42, 0, '', '    ', 'Archive', 15, '1358233742', 1),
(43, 0, '', '       ', 'Archive', 15, '1358233746', 1),
(44, 0, '', '   ', 'Archive', 15, '1358233747', 1),
(45, 0, '', '    ', 'Archive', 15, '1358233749', 1),
(46, 0, '', '    ', 'Archive', 15, '1358233751', 1),
(47, 0, '', '    ', 'Archive', 15, '1358233753', 1),
(48, 0, '', '   ', 'Archive', 15, '1358233768', 1),
(49, 0, '', '   ', 'Archive', 15, '1358233775', 1),
(50, 0, '', '   ', 'Archive', 15, '1358233783', 1),
(51, 0, '', '   ', 'Archive', 15, '1358233785', 1),
(52, 0, '', '   ', 'Archive', 15, '1358233786', 1),
(53, 0, '', '   ', 'Archive', 15, '1358233787', 1),
(54, 0, '', '   ', 'Archive', 15, '1358233790', 1),
(55, 0, '', '   ', 'Archive', 15, '1358233792', 1),
(56, 0, '', '   ', 'Archive', 15, '1358233793', 1),
(57, 0, '', '   ', 'Archive', 15, '1358233794', 1),
(58, 0, '', '   ', 'Archive', 15, '1358233796', 1),
(59, 0, '', '     ', 'Archive', 14, '1358301508', 1),
(60, 0, '', ' ', 'Archive', 14, '1358301536', 1),
(61, 0, '', ' ', 'Archive', 14, '1358301539', 1),
(62, 0, '', ' ', 'Archive', 14, '1358301541', 1),
(63, 0, '', ' ', 'Archive', 14, '1358301542', 1);

-- --------------------------------------------------------

--
-- 表的结构 `yulin_config`
--

CREATE TABLE IF NOT EXISTS `yulin_config` (
  `name` varchar(50) CHARACTER SET utf8 NOT NULL,
  `value` varchar(100) CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='配置';

--
-- 转存表中的数据 `yulin_config`
--

INSERT INTO `yulin_config` (`name`, `value`) VALUES
('ALLOW_EXTS', 'png,gif,jpg,jpeg,7z,mp3,flv,doc,rar,zip,txt,swf,pdf,ppt,chm,tar.gz,gz'),
('CONTROL', '1'),
('MAX_SIZE', '500000'),
('SAFETY_TIME', '360000'),
('THUMB_MAX_HEIGHT', '300,50'),
('THUMB_MAX_WIDTH', '300,50'),
('THUMB_PREFIX', 'm_,s_'),
('URL_HTML_SUFFIX', 'html'),
('URL_MODEL', '2');

-- --------------------------------------------------------

--
-- 表的结构 `yulin_message`
--

CREATE TABLE IF NOT EXISTS `yulin_message` (
  `id` int(8) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(50) CHARACTER SET utf8 NOT NULL,
  `user` varchar(50) CHARACTER SET utf8 NOT NULL,
  `content` text CHARACTER SET utf8 NOT NULL,
  `replay` text CHARACTER SET utf8 NOT NULL,
  `creattime` varchar(50) CHARACTER SET utf8 NOT NULL,
  `replaytime` varchar(50) CHARACTER SET utf8 NOT NULL,
  `status` int(1) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=20 ;

--
-- 转存表中的数据 `yulin_message`
--

INSERT INTO `yulin_message` (`id`, `title`, `user`, `content`, `replay`, `creattime`, `replaytime`, `status`) VALUES
(1, '', 'asdf', 'asdf', '', '1356943946', '', 1),
(2, '', '1', '1', '', '1357365284', '', 1),
(3, '', '1', '1', '', '1357365284', '', 1),
(4, '', '1', '1', '', '1357365284', '', 1),
(5, '', '1', '1', '', '1357365284', '', 1),
(6, '', '1', '1', '', '1357365284', '', 1),
(7, '', '1', '1', '', '1357365285', '', 1),
(8, '', '1', '1', '', '1357365286', '', 1),
(9, '', '1', '1', '', '1357365286', '', 1),
(10, '', '1', '1', '', '1357365286', '', 1),
(11, '', '1', '1', '', '1357365286', '', 1),
(12, '', '1', '1', '', '1357365286', '', 1),
(13, '', '1', '1', '', '1357365287', '', 1),
(14, '', '1', '1', '', '1357365288', '', 1),
(15, '', '1', '1', '', '1357365288', '', 1),
(16, '', '1', '1', '', '1357365289', '', 1),
(17, '', 'asdf', 'asdf', '', '1357366677', '', 1),
(18, '', 'dsfg', 'dg', '', '1357367206', '', 1),
(19, '', 'yuiyui', 'tyujyk', '.......', '1357450281', '1357462219', 2);

-- --------------------------------------------------------

--
-- 表的结构 `yulin_module`
--

CREATE TABLE IF NOT EXISTS `yulin_module` (
  `id` int(4) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) CHARACTER SET utf8 NOT NULL,
  `value` varchar(20) CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 COMMENT='模型' AUTO_INCREMENT=6 ;

--
-- 转存表中的数据 `yulin_module`
--

INSERT INTO `yulin_module` (`id`, `name`, `value`) VALUES
(1, '结构', 'Structure'),
(2, '文档', 'Archive'),
(3, '产品', 'Product'),
(4, '下载', 'Down'),
(5, '留言', 'Message');

-- --------------------------------------------------------

--
-- 表的结构 `yulin_node`
--

CREATE TABLE IF NOT EXISTS `yulin_node` (
  `id` smallint(6) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 NOT NULL,
  `title` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `status` tinyint(1) unsigned DEFAULT NULL,
  `remark` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `sort` smallint(6) unsigned DEFAULT NULL,
  `pid` smallint(6) unsigned NOT NULL,
  `level` tinyint(1) unsigned NOT NULL,
  `type` int(1) unsigned NOT NULL DEFAULT '0',
  `module` int(5) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `name` (`name`),
  KEY `parentId` (`pid`),
  KEY `level` (`level`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 COMMENT='节点' AUTO_INCREMENT=73 ;

--
-- 转存表中的数据 `yulin_node`
--

INSERT INTO `yulin_node` (`id`, `name`, `title`, `status`, `remark`, `sort`, `pid`, `level`, `type`, `module`) VALUES
(1, 'YPadmin', '系统后台', 1, NULL, NULL, 0, 1, 0, 0),
(2, 'Index', '后台首页', 1, NULL, NULL, 1, 2, 2, 0),
(4, 'User', '用户管理', 1, NULL, NULL, 1, 2, 1, 0),
(7, 'index', '列表', 1, NULL, NULL, 2, 3, 0, 0),
(9, 'Config', '配置管理', 1, NULL, NULL, 1, 2, 2, 0),
(10, 'Archive', '文档管理', 1, NULL, NULL, 1, 2, 1, 2),
(11, 'Sort', '全站结构', 1, NULL, NULL, 1, 2, 2, 0),
(13, 'Product', '产品管理', 1, NULL, NULL, 1, 2, 1, 3),
(14, 'Job', '人才招聘', 1, NULL, NULL, 1, 2, 1, 0),
(15, 'Download', '下载管理', 1, NULL, NULL, 1, 2, 1, 0),
(16, 'Message', '留言管理', 1, NULL, NULL, 1, 2, 1, 0),
(17, 'Comment', '评论管理', 1, NULL, NULL, 1, 2, 1, 0),
(19, 'Role', '分组管理', 1, NULL, NULL, 1, 2, 1, 0),
(21, 'index', '列表', 1, NULL, NULL, 9, 3, 0, 0),
(22, 'index', '列表', 1, NULL, NULL, 10, 3, 0, 0),
(23, 'index', '列表', 1, NULL, NULL, 11, 3, 0, 0),
(25, 'index', '列表', 1, NULL, NULL, 13, 3, 0, 0),
(26, 'index', '列表', 1, NULL, NULL, 14, 3, 0, 0),
(27, 'index', '列表', 1, NULL, NULL, 15, 3, 0, 0),
(28, 'index', '列表', 1, NULL, NULL, 16, 3, 0, 0),
(29, 'index', '列表', 1, NULL, NULL, 17, 3, 0, 0),
(31, 'Singlepage', '单页管理', 1, NULL, NULL, 1, 2, 2, 0),
(32, 'configupdate', '更新', 1, NULL, NULL, 9, 3, 0, 0),
(33, 'add', '添加', 1, NULL, NULL, 10, 3, 0, 0),
(34, 'insert', '插入', 1, NULL, NULL, 10, 3, 0, 0),
(35, 'edit', '修改', 1, NULL, NULL, 10, 3, 0, 0),
(36, 'update', '更新', 1, NULL, NULL, 10, 3, 0, 0),
(37, 'pass', '审核', 1, NULL, NULL, 10, 3, 0, 0),
(39, 'sortadd', '添加', 1, NULL, NULL, 11, 3, 0, 0),
(40, 'sortinsert', '插入', 1, NULL, NULL, 11, 3, 0, 0),
(41, 'sortedit', '修改', 1, NULL, NULL, 11, 3, 0, 0),
(42, 'update', '更新', 1, NULL, NULL, 11, 3, 0, 0),
(43, 'del', '删除', 1, NULL, NULL, 10, 3, 0, 0),
(44, 'add', '添加', 1, NULL, NULL, 13, 3, 0, 0),
(45, 'insert', '插入', 1, NULL, NULL, 13, 3, 0, 0),
(46, 'edit', '修改', 1, NULL, NULL, 13, 3, 0, 0),
(47, 'update', '更新', 1, NULL, NULL, 13, 3, 0, 0),
(48, 'pass', '审核', 1, NULL, NULL, 13, 3, 0, 0),
(49, 'del', '删除', 1, NULL, NULL, 13, 3, 0, 0),
(50, 'del', '删除', 1, NULL, NULL, 16, 3, 0, 0),
(51, 'update', '回复', 1, NULL, NULL, 16, 3, 0, 0),
(52, 'pass', '审核', 1, NULL, NULL, 16, 3, 0, 0),
(53, 'index', '列表', 1, NULL, NULL, 19, 3, 0, 0),
(54, 'add', '添加', 1, NULL, NULL, 19, 3, 0, 0),
(55, 'insert', '插入', 1, NULL, NULL, 19, 3, 0, 0),
(56, 'edit', '修改', 1, NULL, NULL, 19, 3, 0, 0),
(57, 'update', '更新', 1, NULL, NULL, 19, 3, 0, 0),
(58, 'impower', '授权列表', 1, NULL, NULL, 19, 3, 0, 0),
(59, 'replace', '更新授权', 1, NULL, NULL, 19, 3, 0, 0),
(60, 'index', '列表', 1, NULL, NULL, 31, 3, 0, 0),
(61, 'add', '添加', 1, NULL, NULL, 31, 3, 0, 0),
(62, 'insert', '插入', 1, NULL, NULL, 31, 3, 0, 0),
(63, 'edit', '修改', 1, NULL, NULL, 31, 3, 0, 0),
(64, 'update', '更新', 1, NULL, NULL, 31, 3, 0, 0),
(65, 'pass', '审核', 1, NULL, NULL, 31, 3, 0, 0),
(66, 'index', '列表', 1, NULL, NULL, 4, 3, 0, 0),
(67, 'useradd', '添加', 1, NULL, NULL, 4, 3, 0, 0),
(68, 'insert', '插入', 1, NULL, NULL, 4, 3, 0, 0),
(69, 'useredit', '修改', 1, NULL, NULL, 4, 3, 0, 0),
(70, 'update', '更新', 1, NULL, NULL, 4, 3, 0, 0),
(71, 'del', '删除', 1, NULL, NULL, 4, 3, 0, 0),
(72, 'del', '删除', 1, NULL, NULL, 31, 3, 0, 0);

-- --------------------------------------------------------

--
-- 表的结构 `yulin_product`
--

CREATE TABLE IF NOT EXISTS `yulin_product` (
  `id` int(5) unsigned NOT NULL AUTO_INCREMENT,
  `sort_id` int(5) unsigned NOT NULL,
  `paixu` int(5) unsigned NOT NULL,
  `name` varchar(100) CHARACTER SET utf8 NOT NULL,
  `style` varchar(20) CHARACTER SET utf8 NOT NULL,
  `number` varchar(100) CHARACTER SET utf8 NOT NULL,
  `clicks` varchar(10) CHARACTER SET utf8 NOT NULL DEFAULT '0',
  `market_price` decimal(10,2) unsigned NOT NULL DEFAULT '0.00',
  `shop_price` decimal(10,2) unsigned NOT NULL DEFAULT '0.00',
  `remark` text CHARACTER SET utf8 NOT NULL,
  `content` text CHARACTER SET utf8 NOT NULL,
  `creattime` varchar(50) CHARACTER SET utf8 NOT NULL,
  `attribute` int(1) unsigned NOT NULL DEFAULT '0',
  `status` int(1) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='产品' AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `yulin_role`
--

CREATE TABLE IF NOT EXISTS `yulin_role` (
  `id` smallint(6) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 NOT NULL,
  `pid` smallint(6) DEFAULT NULL,
  `status` tinyint(1) unsigned DEFAULT NULL,
  `remark` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 COMMENT='角色' AUTO_INCREMENT=5 ;

--
-- 转存表中的数据 `yulin_role`
--

INSERT INTO `yulin_role` (`id`, `name`, `pid`, `status`, `remark`) VALUES
(2, '网站编辑', 0, 1, NULL),
(3, '初级管理员', 0, 1, NULL),
(4, '超级管理员', 0, 1, '超级管理员');

-- --------------------------------------------------------

--
-- 表的结构 `yulin_role_user`
--

CREATE TABLE IF NOT EXISTS `yulin_role_user` (
  `role_id` mediumint(9) unsigned DEFAULT NULL,
  `user_id` mediumint(9) unsigned DEFAULT NULL,
  KEY `user_id` (`user_id`),
  KEY `group_id` (`role_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='角色用户关联';

--
-- 转存表中的数据 `yulin_role_user`
--

INSERT INTO `yulin_role_user` (`role_id`, `user_id`) VALUES
(2, 11),
(3, 12),
(5, 14);

-- --------------------------------------------------------

--
-- 表的结构 `yulin_singlepage`
--

CREATE TABLE IF NOT EXISTS `yulin_singlepage` (
  `id` int(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) CHARACTER SET utf8 NOT NULL,
  `title` varchar(50) CHARACTER SET utf8 NOT NULL,
  `content` text CHARACTER SET utf8 NOT NULL,
  `style` varchar(20) CHARACTER SET utf8 NOT NULL,
  `paixu` int(8) unsigned NOT NULL,
  `status` int(1) NOT NULL,
  `creattime` varchar(50) CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 COMMENT='单页' AUTO_INCREMENT=4 ;

--
-- 转存表中的数据 `yulin_singlepage`
--

INSERT INTO `yulin_singlepage` (`id`, `name`, `title`, `content`, `style`, `paixu`, `status`, `creattime`) VALUES
(3, '网站活动', '网站活动', '<p>\n	阿什顿发生的发生的发生地方圣达菲as\n</p>\n<p>\n	&nbsp;阿什顿发生地方\n</p>\n<p>\n	爱上对方撒地方\n</p>\n<p>\n	爱上对方爱上对方\n</p>\n<p>\n	爱上对方爱上对方\n</p>\n<p>\n	<br />\n</p>\nasdf<br />', '', 32, 2, '1353141685');

-- --------------------------------------------------------

--
-- 表的结构 `yulin_sort`
--

CREATE TABLE IF NOT EXISTS `yulin_sort` (
  `id` int(5) unsigned NOT NULL AUTO_INCREMENT,
  `pid` int(5) unsigned NOT NULL,
  `moduleid` int(5) unsigned NOT NULL,
  `name` varchar(100) CHARACTER SET utf8 NOT NULL,
  `paixu` int(5) unsigned NOT NULL,
  `content` text CHARACTER SET utf8 NOT NULL,
  `tpl` varchar(100) CHARACTER SET utf8 NOT NULL,
  `creattime` varchar(100) CHARACTER SET utf8 NOT NULL,
  `isnav` int(1) unsigned NOT NULL DEFAULT '0',
  `pointmodule` varchar(20) CHARACTER SET utf8 NOT NULL,
  `pointsort` int(8) unsigned NOT NULL,
  `pointpage` int(8) unsigned NOT NULL,
  `url` varchar(25) CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 COMMENT='分类' AUTO_INCREMENT=38 ;

--
-- 转存表中的数据 `yulin_sort`
--

INSERT INTO `yulin_sort` (`id`, `pid`, `moduleid`, `name`, `paixu`, `content`, `tpl`, `creattime`, `isnav`, `pointmodule`, `pointsort`, `pointpage`, `url`) VALUES
(1, 0, 1, '每日一笑', 0, '<span style="background-color:rgba(255, 255, 255, 0);"><span style="background-color:rgba(255, 255, 255, 0);"><span style="background-color:rgba(255, 255, 255, 0);"><span style="background-color:rgba(255, 255, 255, 0);"><span style="background-color:rgba(255, 255, 255, 0);"><span style="background-color:rgba(255, 255, 255, 0);">听说，人生最辉煌的一断时间是高考前6个月，这时你上知天体运行原理，下知有机无机反应，前有椭圆双曲线，后有杂交生物圈，外可说英语，内可修古文，求得了数列，说得了马哲，溯源中华上下五千年，延推赤州陆海百千万，既知音乐美术计算机，兼修武术民俗老虎钳，现在呢，除了玩手机，废人一个。</span></span></span></span></span></span><br />', '', '', 1, '', 0, 3, ''),
(2, 0, 1, '热门标签', 0, '', '', '', 1, '', 0, 0, ''),
(3, 0, 1, 'WEB开发', 0, '', '', '', 1, '', 0, 0, ''),
(4, 3, 1, 'Thinkphp', 0, '', '', '', 1, 'Archive', 9, 0, 'Thinkphp'),
(8, 0, 2, 'WEB开发', 0, '', '', '', 0, '', 0, 0, ''),
(9, 8, 2, 'Thinkphp', 0, '', '', '', 0, '', 0, 0, ''),
(10, 8, 2, 'PHP', 0, '', '', '', 0, '', 0, 0, ''),
(26, 3, 1, 'PHP', 0, '', '', '', 1, 'Archive', 10, 0, 'PHP'),
(27, 3, 1, 'Mysql', 0, '', '', '', 1, 'Archive', 30, 0, 'Mysql'),
(28, 3, 1, 'Javascript', 0, '', '', '', 1, 'Archive', 31, 0, 'Javascript'),
(29, 3, 1, '其他技术', 0, '', '', '', 1, 'Archive', 32, 0, 'Others'),
(30, 8, 2, 'Mysql', 0, '', '', '', 0, '', 0, 0, ''),
(31, 8, 2, 'Javascript', 0, '', '', '', 0, '', 0, 0, ''),
(32, 8, 2, '其他技术', 0, '', '', '', 0, '', 0, 0, ''),
(33, 0, 1, '站点介绍', 0, '本站采用Thinkphp框架开发，积极搜集WEB开发中出现的问题，总结经验，为广大网友提供帮助', '', '', 1, '', 0, 0, ''),
(34, 0, 1, '信息反馈', 0, '如果您有什么好的建议，或者有什么疑问可以给我留言', '', '', 1, 'Message', 0, 0, 'index'),
(36, 0, 2, '如花', 0, '', '', '', 0, '', 0, 0, '');

-- --------------------------------------------------------

--
-- 表的结构 `yulin_tag`
--

CREATE TABLE IF NOT EXISTS `yulin_tag` (
  `id` int(6) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 NOT NULL,
  `count` int(6) unsigned NOT NULL,
  `module` varchar(100) CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=14 ;

--
-- 转存表中的数据 `yulin_tag`
--

INSERT INTO `yulin_tag` (`id`, `name`, `count`, `module`) VALUES
(1, 'Jquery', 2, 'Archive'),
(2, '伪静态', 1, 'Archive'),
(3, 'PHP', 7, 'Archive'),
(4, 'Thinkphp', 1, 'Archive'),
(5, 'SyntaxHighlighter', 1, 'Archive'),
(6, 'kindeditor', 1, 'Archive'),
(7, 'Excel', 2, 'Archive'),
(8, 'Jcrop', 1, 'Archive'),
(9, '头像裁剪', 1, 'Archive'),
(10, 'Javascript', 1, 'Archive'),
(11, 'Mysql', 1, 'Archive'),
(12, '性能优化', 2, 'Archive'),
(13, '常用函数', 1, 'Archive');

-- --------------------------------------------------------

--
-- 表的结构 `yulin_tagged`
--

CREATE TABLE IF NOT EXISTS `yulin_tagged` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) unsigned NOT NULL,
  `record_id` int(11) unsigned NOT NULL,
  `tag_id` int(11) unsigned NOT NULL,
  `create_time` int(11) unsigned NOT NULL,
  `module` varchar(100) CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=99 ;

--
-- 转存表中的数据 `yulin_tagged`
--

INSERT INTO `yulin_tagged` (`id`, `user_id`, `record_id`, `tag_id`, `create_time`, `module`) VALUES
(27, 1, 3, 1, 1357289162, 'Archive'),
(37, 1, 1, 1, 1357291519, 'Archive'),
(47, 1, 9, 3, 1357357011, 'Archive'),
(56, 1, 4, 4, 1357458763, 'Archive'),
(59, 1, 12, 3, 1357610766, 'Archive'),
(63, 1, 13, 3, 1357624207, 'Archive'),
(74, 1, 8, 3, 1357794297, 'Archive'),
(75, 1, 8, 7, 1357794297, 'Archive'),
(76, 1, 11, 10, 1357794334, 'Archive'),
(77, 1, 10, 8, 1357794435, 'Archive'),
(78, 1, 10, 9, 1357794435, 'Archive'),
(79, 1, 7, 3, 1357795505, 'Archive'),
(80, 1, 7, 7, 1357795505, 'Archive'),
(81, 1, 2, 2, 1357795519, 'Archive'),
(82, 1, 2, 3, 1357795519, 'Archive'),
(83, 1, 6, 5, 1357795536, 'Archive'),
(84, 1, 6, 6, 1357795536, 'Archive'),
(91, 1, 14, 3, 1357894110, 'Archive'),
(95, 1, 17, 12, 1358240422, 'Archive'),
(96, 1, 16, 11, 1358320078, 'Archive'),
(97, 1, 16, 12, 1358320078, 'Archive'),
(98, 1, 18, 13, 1358327166, 'Archive');

-- --------------------------------------------------------

--
-- 表的结构 `yulin_user`
--

CREATE TABLE IF NOT EXISTS `yulin_user` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `paixu` int(8) unsigned NOT NULL,
  `account` varchar(64) CHARACTER SET utf8 NOT NULL,
  `nickname` int(8) unsigned NOT NULL,
  `password` char(32) CHARACTER SET utf8 NOT NULL,
  `email` varchar(50) CHARACTER SET utf8 NOT NULL,
  `remark` varchar(255) CHARACTER SET utf8 NOT NULL,
  `creattime` varchar(30) CHARACTER SET utf8 NOT NULL,
  `lastlogintime` varchar(30) CHARACTER SET utf8 NOT NULL,
  `logincount` int(8) NOT NULL,
  `lastloginip` varchar(100) CHARACTER SET utf8 NOT NULL,
  `status` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 COMMENT='用户' AUTO_INCREMENT=12 ;

--
-- 转存表中的数据 `yulin_user`
--

INSERT INTO `yulin_user` (`id`, `paixu`, `account`, `nickname`, `password`, `email`, `remark`, `creattime`, `lastlogintime`, `logincount`, `lastloginip`, `status`) VALUES
(10, 0, 'admin', 0, '21232f297a57a5a743894a0e4a801fc3', '', '', '', '1358414442', 277, '218.90.186.62 (江苏省无锡市.电信ADSL)', 1),
(11, 0, 'abao', 2, 'e0ca697096a8de777aa9a0b4826b115c', 'aaa@qq.com', '', '1352340818', '1358410178', 23, '218.90.186.62 (江苏省无锡市.电信ADSL)', 1);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
